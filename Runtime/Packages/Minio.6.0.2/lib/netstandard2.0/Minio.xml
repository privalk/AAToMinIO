<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Minio</name>
    </assembly>
    <members>
        <member name="M:Minio.MinioClient.ListBucketsAsync(System.Threading.CancellationToken)">
            <summary>
                List all the buckets for the current Endpoint URL
            </summary>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Task with an iterator lazily populated with objects</returns>
        </member>
        <member name="M:Minio.MinioClient.BucketExistsAsync(Minio.DataModel.Args.BucketExistsArgs,System.Threading.CancellationToken)">
            <summary>
                Check if a private bucket with the given name exists.
            </summary>
            <param name="args">BucketExistsArgs Arguments Object which has bucket identifier information - bucket name, region</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
        </member>
        <member name="M:Minio.MinioClient.RemoveBucketAsync(Minio.DataModel.Args.RemoveBucketArgs,System.Threading.CancellationToken)">
            <summary>
                Remove the bucket with the given name.
            </summary>
            <param name="args">RemoveBucketArgs Arguments Object which has bucket identifier information like bucket name .etc.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucketName is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucketName is not found</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucketName is null</exception>
        </member>
        <member name="M:Minio.MinioClient.MakeBucketAsync(Minio.DataModel.Args.MakeBucketArgs,System.Threading.CancellationToken)">
            <summary>
                Create a bucket with the given name.
            </summary>
            <param name="args">MakeBucketArgs Arguments Object that has bucket info like name, location. etc</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucketName is invalid</exception>
            <exception cref="T:System.NotImplementedException">When object-lock or another extension is not implemented</exception>
        </member>
        <member name="M:Minio.MinioClient.GetVersioningAsync(Minio.DataModel.Args.GetVersioningArgs,System.Threading.CancellationToken)">
            <summary>
                Get Versioning information on the bucket with given bucket name
            </summary>
            <param name="args">GetVersioningArgs takes bucket as argument. </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> GetVersioningResponse with information populated from REST response </returns>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucketName is invalid</exception>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.SetVersioningAsync(Minio.DataModel.Args.SetVersioningArgs,System.Threading.CancellationToken)">
            <summary>
                Set Versioning as specified on the bucket with given bucket name
            </summary>
            <param name="args">SetVersioningArgs Arguments Object with information like Bucket name, Versioning configuration</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.ListObjectsAsync(Minio.DataModel.Args.ListObjectsArgs,System.Threading.CancellationToken)">
            <summary>
                List all objects along with versions non-recursively in a bucket with a given prefix, optionally emulating a
                directory
            </summary>
            <param name="args">
                ListObjectsArgs Arguments Object with information like Bucket name, prefix, recursive listing,
                versioning
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>An observable of items that client can subscribe to</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">If a functionality or extension (like versioning) is not implemented</exception>
            <exception cref="T:System.InvalidOperationException">
                For example, if you call ListObjectsAsync on a bucket with versioning
                enabled or object lock enabled
            </exception>
        </member>
        <member name="M:Minio.MinioClient.GetBucketNotificationsAsync(Minio.DataModel.Args.GetBucketNotificationsArgs,System.Threading.CancellationToken)">
            <summary>
                Gets notification configuration for this bucket
            </summary>
            <param name="args">GetBucketNotificationsArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.SetBucketNotificationsAsync(Minio.DataModel.Args.SetBucketNotificationsArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the notification configuration for this bucket
            </summary>
            <param name="args">
                SetBucketNotificationsArgs Arguments Object with information like Bucket name, notification object
                with configuration to set
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveAllBucketNotificationsAsync(Minio.DataModel.Args.RemoveAllBucketNotificationsArgs,System.Threading.CancellationToken)">
            <summary>
                Removes all bucket notification configurations stored on the server.
            </summary>
            <param name="args">RemoveAllBucketNotificationsArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.ListenBucketNotificationsAsync(Minio.DataModel.Args.ListenBucketNotificationsArgs,System.Threading.CancellationToken)">
            <summary>
                Subscribes to bucket change notifications (a Minio-only extension)
            </summary>
            <param name="args">
                ListenBucketNotificationsArgs Arguments Object with information like Bucket name, listen events,
                prefix filter keys, suffix filter keys
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>An observable of JSON-based notification events</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.GetBucketTagsAsync(Minio.DataModel.Args.GetBucketTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Gets Tagging values set for this bucket
            </summary>
            <param name="args">GetBucketTagsArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Tagging Object with key-value tag pairs</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.SetBucketEncryptionAsync(Minio.DataModel.Args.SetBucketEncryptionArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Encryption Configuration for the mentioned bucket.
            </summary>
            <param name="args">SetBucketEncryptionArgs Arguments Object with information like Bucket name, encryption config</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.GetBucketEncryptionAsync(Minio.DataModel.Args.GetBucketEncryptionArgs,System.Threading.CancellationToken)">
            <summary>
                Returns the Encryption Configuration for the mentioned bucket.
            </summary>
            <param name="args">GetBucketEncryptionArgs Arguments Object encapsulating information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> An object of type ServerSideEncryptionConfiguration </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveBucketEncryptionAsync(Minio.DataModel.Args.RemoveBucketEncryptionArgs,System.Threading.CancellationToken)">
            <summary>
                Removes the Encryption Configuration for the mentioned bucket.
            </summary>
            <param name="args">RemoveBucketEncryptionArgs Arguments Object encapsulating information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.SetBucketTagsAsync(Minio.DataModel.Args.SetBucketTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Tagging values for this bucket
            </summary>
            <param name="args">SetBucketTagsArgs Arguments Object with information like Bucket name, tag key-value pairs</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveBucketTagsAsync(Minio.DataModel.Args.RemoveBucketTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Removes Tagging values stored for the bucket.
            </summary>
            <param name="args">RemoveBucketTagsArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.SetObjectLockConfigurationAsync(Minio.DataModel.Args.SetObjectLockConfigurationArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Object Lock Configuration on this bucket
            </summary>
            <param name="args">
                SetObjectLockConfigurationArgs Arguments Object with information like Bucket name, object lock
                configuration to set
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.GetObjectLockConfigurationAsync(Minio.DataModel.Args.GetObjectLockConfigurationArgs,System.Threading.CancellationToken)">
            <summary>
                Gets the Object Lock Configuration on this bucket
            </summary>
            <param name="args">GetObjectLockConfigurationArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>ObjectLockConfiguration object</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveObjectLockConfigurationAsync(Minio.DataModel.Args.RemoveObjectLockConfigurationArgs,System.Threading.CancellationToken)">
            <summary>
                Removes the Object Lock Configuration on this bucket
            </summary>
            <param name="args">RemoveObjectLockConfigurationArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.SetBucketLifecycleAsync(Minio.DataModel.Args.SetBucketLifecycleArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Lifecycle configuration for this bucket
            </summary>
            <param name="args">
                SetBucketLifecycleArgs Arguments Object with information like Bucket name, Lifecycle configuration
                object
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.GetBucketLifecycleAsync(Minio.DataModel.Args.GetBucketLifecycleArgs,System.Threading.CancellationToken)">
            <summary>
                Gets Lifecycle configuration set for this bucket returned in an object
            </summary>
            <param name="args">GetBucketLifecycleArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>LifecycleConfiguration Object with the lifecycle configuration</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveBucketLifecycleAsync(Minio.DataModel.Args.RemoveBucketLifecycleArgs,System.Threading.CancellationToken)">
            <summary>
                Removes Lifecycle configuration stored for the bucket.
            </summary>
            <param name="args">RemoveBucketLifecycleArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.GetBucketReplicationAsync(Minio.DataModel.Args.GetBucketReplicationArgs,System.Threading.CancellationToken)">
            <summary>
                Get Replication configuration for the bucket
            </summary>
            <param name="args">GetBucketReplicationArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Replication configuration object</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.MissingBucketReplicationConfigurationException">When bucket replication configuration is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.SetBucketReplicationAsync(Minio.DataModel.Args.SetBucketReplicationArgs,System.Threading.CancellationToken)">
            <summary>
                Set the Replication configuration for the bucket
            </summary>
            <param name="args">
                SetBucketReplicationArgs Arguments Object with information like Bucket name, Replication
                Configuration object
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.MissingBucketReplicationConfigurationException">When bucket replication configuration is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveBucketReplicationAsync(Minio.DataModel.Args.RemoveBucketReplicationArgs,System.Threading.CancellationToken)">
            <summary>
                Remove Replication configuration for the bucket.
            </summary>
            <param name="args">RemoveBucketReplicationArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.MissingBucketReplicationConfigurationException">When bucket replication configuration is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.ListenBucketNotificationsAsync(System.String,System.Collections.Generic.IList{Minio.DataModel.Notification.EventType},System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Subscribes to bucket change notifications (a Minio-only extension)
            </summary>
            <param name="bucketName">Bucket to get notifications from</param>
            <param name="events">Events to listen for</param>
            <param name="prefix">Filter keys starting with this prefix</param>
            <param name="suffix">Filter keys ending with this suffix</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>An observable of JSON-based notification events</returns>
        </member>
        <member name="M:Minio.MinioClient.GetPolicyAsync(Minio.DataModel.Args.GetPolicyArgs,System.Threading.CancellationToken)">
            <summary>
                Returns current policy stored on the server for this bucket
            </summary>
            <param name="args">GetPolicyArgs object has information like Bucket name.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Task that returns the Bucket policy as a json string</returns>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucketName is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.UnexpectedMinioException">When a policy is not set</exception>
        </member>
        <member name="M:Minio.MinioClient.SetPolicyAsync(Minio.DataModel.Args.SetPolicyArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the current bucket policy
            </summary>
            <param name="args">SetPolicyArgs object has information like Bucket name and the policy to set in Json format</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucketName is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.UnexpectedMinioException">When a policy is not set</exception>
            <returns>Task to set a policy</returns>
        </member>
        <member name="M:Minio.MinioClient.RemovePolicyAsync(Minio.DataModel.Args.RemovePolicyArgs,System.Threading.CancellationToken)">
            <summary>
                Removes the current bucket policy
            </summary>
            <param name="args">RemovePolicyArgs object has information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Task to set a policy</returns>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucketName is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.UnexpectedMinioException">When a policy is not set</exception>
        </member>
        <member name="M:Minio.MinioClient.GetObjectListAsync(Minio.DataModel.Args.GetObjectListArgs,System.Threading.CancellationToken)">
            <summary>
                Gets the list of objects in the bucket filtered by prefix
            </summary>
            <param name="args">
                GetObjectListArgs Arguments Object with information like Bucket name, prefix, delimiter, marker,
                versions(get version IDs of the objects)
            </param>
            <returns>Task with a tuple populated with objects</returns>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
        </member>
        <member name="M:Minio.MinioClient.GetObjectVersionsListAsync(Minio.DataModel.Args.GetObjectListArgs,System.Threading.CancellationToken)">
            <summary>
                Gets the list of objects along with version IDs in the bucket filtered by prefix
            </summary>
            <param name="args">
                GetObjectListArgs Arguments Object with information like Bucket name, prefix, delimiter, marker,
                versions(get version IDs of the objects)
            </param>
            <returns>Task with a tuple populated with objects</returns>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
        </member>
        <member name="M:Minio.MinioClient.GetObjectListAsync(System.String,System.String,System.String,System.String,System.Threading.CancellationToken)">
            <summary>
                Gets the list of objects in the bucket filtered by prefix
            </summary>
            <param name="bucketName">Bucket to list objects from</param>
            <param name="prefix">Filters all objects starting with a given prefix</param>
            <param name="delimiter">Delimit the output upto this character</param>
            <param name="marker">marks location in the iterator sequence</param>
            <returns>Task with a tuple populated with objects</returns>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
        </member>
        <member name="M:Minio.MinioClient.GetObjectAsync(Minio.DataModel.Args.GetObjectArgs,System.Threading.CancellationToken)">
            <summary>
                Get an object. The object will be streamed to the callback given by the user.
            </summary>
            <param name="args">
                GetObjectArgs Arguments Object encapsulates information like - bucket name, object name, server-side
                encryption object, action stream, length, offset
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">If the directory to copy to is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.SelectObjectContentAsync(Minio.DataModel.Args.SelectObjectContentArgs,System.Threading.CancellationToken)">
            <summary>
                Select an object's content. The object will be streamed to the callback given by the user.
            </summary>
            <param name="args">
                SelectObjectContentArgs Arguments Object which encapsulates bucket name, object name, Select Object
                Options
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.ListIncompleteUploads(Minio.DataModel.Args.ListIncompleteUploadsArgs,System.Threading.CancellationToken)">
            <summary>
                Lists all incomplete uploads in a given bucket and prefix recursively
            </summary>
            <param name="args">ListIncompleteUploadsArgs Arguments Object which encapsulates bucket name, prefix, recursive</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>A lazily populated list of incomplete uploads</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveIncompleteUploadAsync(Minio.DataModel.Args.RemoveIncompleteUploadArgs,System.Threading.CancellationToken)">
            <summary>
                Remove incomplete uploads from a given bucket and objectName
            </summary>
            <param name="args">RemoveIncompleteUploadArgs Arguments Object which encapsulates bucket, object names</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.PresignedGetObjectAsync(Minio.DataModel.Args.PresignedGetObjectArgs)">
            <summary>
                Presigned get url - returns a presigned url to access an object's data without credentials.URL can have a maximum
                expiry of
                up to 7 days or a minimum of 1 second.Additionally, you can override a set of response headers using reqParams.
            </summary>
            <param name="args">
                PresignedGetObjectArgs Arguments object encapsulating bucket and object names, expiry time, response
                headers, request date
            </param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
        </member>
        <member name="M:Minio.MinioClient.PresignedPostPolicyAsync(Minio.DataModel.Args.PresignedPostPolicyArgs)">
            <summary>
                Presigned post policy
            </summary>
            <param name="args">PresignedPostPolicyArgs Arguments object encapsulating Policy, Expiry, Region, </param>
            <returns>Tuple of URI and Policy Form data</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.PresignedPutObjectAsync(Minio.DataModel.Args.PresignedPutObjectArgs)">
            <summary>
                Presigned Put url -returns a presigned url to upload an object without credentials.URL can have a maximum expiry of
                upto 7 days or a minimum of 1 second.
            </summary>
            <param name="args">PresignedPutObjectArgs Arguments Object which encapsulates bucket, object names, expiry</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.GetObjectLegalHoldAsync(Minio.DataModel.Args.GetObjectLegalHoldArgs,System.Threading.CancellationToken)">
            <summary>
                Get the configuration object for Legal Hold Status
            </summary>
            <param name="args">
                GetObjectLegalHoldArgs Arguments Object which has object identifier information - bucket name,
                object name, version ID
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation </param>
            <returns> True if Legal Hold is ON, false otherwise  </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.SetObjectLegalHoldAsync(Minio.DataModel.Args.SetObjectLegalHoldArgs,System.Threading.CancellationToken)">
            <summary>
                Set the Legal Hold Status using the related configuration
            </summary>
            <param name="args">
                SetObjectLegalHoldArgs Arguments Object which has object identifier information - bucket name,
                object name, version ID
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.GetObjectTagsAsync(Minio.DataModel.Args.GetObjectTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Gets Tagging values set for this object
            </summary>
            <param name="args"> GetObjectTagsArgs Arguments Object with information like Bucket, Object name, (optional)version Id</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Tagging Object with key-value tag pairs</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveObjectAsync(Minio.DataModel.Args.RemoveObjectArgs,System.Threading.CancellationToken)">
            <summary>
                Removes an object with given name in specific bucket
            </summary>
            <param name="args">
                RemoveObjectArgs Arguments Object encapsulates information like - bucket name, object name, optional
                list of versions to be deleted
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Task</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveObjectsAsync(Minio.DataModel.Args.RemoveObjectsArgs,System.Threading.CancellationToken)">
            <summary>
                Removes list of objects from bucket
            </summary>
            <param name="args">
                RemoveObjectsArgs Arguments Object encapsulates information like - bucket name, List of objects,
                optional list of versions (for each object) to be deleted
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Observable that returns delete error while deleting objects if any</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.SetObjectTagsAsync(Minio.DataModel.Args.SetObjectTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Tagging values for this object
            </summary>
            <param name="args">
                SetObjectTagsArgs Arguments Object with information like Bucket name,Object name, (optional)version
                Id, tag key-value pairs
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveObjectTagsAsync(Minio.DataModel.Args.RemoveObjectTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Removes Tagging values stored for the object
            </summary>
            <param name="args">RemoveObjectTagsArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.SetObjectRetentionAsync(Minio.DataModel.Args.SetObjectRetentionArgs,System.Threading.CancellationToken)">
            <summary>
                Set the Retention using the configuration object
            </summary>
            <param name="args">
                SetObjectRetentionArgs Arguments Object which has object identifier information - bucket name,
                object name, version ID
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.GetObjectRetentionAsync(Minio.DataModel.Args.GetObjectRetentionArgs,System.Threading.CancellationToken)">
            <summary>
                Get the Retention configuration for the object
            </summary>
            <param name="args">
                GetObjectRetentionArgs Arguments Object which has object identifier information - bucket name,
                object name, version ID
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
        </member>
        <member name="M:Minio.MinioClient.ClearObjectRetentionAsync(Minio.DataModel.Args.ClearObjectRetentionArgs,System.Threading.CancellationToken)">
            <summary>
                Clears the Retention configuration for the object
            </summary>
            <param name="args">
                ClearObjectRetentionArgs Arguments Object which has object identifier information - bucket name,
                object name, version ID
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.PutObjectAsync(Minio.DataModel.Args.PutObjectArgs,System.Threading.CancellationToken)">
            <summary>
                Creates object in a bucket fom input stream or filename.
            </summary>
            <param name="args">
                PutObjectArgs Arguments object encapsulating bucket name, object name, file name, object data
                stream, object size, content type.
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the file to copy from not found</exception>
            <exception cref="T:System.ObjectDisposedException">The file stream has been disposed</exception>
            <exception cref="T:System.NotSupportedException">The file stream cannot be read from</exception>
            <exception cref="T:System.InvalidOperationException">The file stream is currently in a read operation</exception>
            <exception cref="T:Minio.Exceptions.AccessDeniedException">For encrypted PUT operation, Access is denied if the key is wrong</exception>
        </member>
        <member name="M:Minio.MinioClient.CopyObjectAsync(Minio.DataModel.Args.CopyObjectArgs,System.Threading.CancellationToken)">
            <summary>
                Copy a source object into a new destination object.
            </summary>
            <param name="args">
                CopyObjectArgs Arguments Object which encapsulates bucket name, object name, destination bucket,
                destination object names, Copy conditions object, metadata, SSE source, destination objects
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.AccessDeniedException">For encrypted copy operation, Access is denied if the key is wrong</exception>
        </member>
        <member name="M:Minio.MinioClient.PresignedPostPolicyAsync(Minio.DataModel.PostPolicy)">
            <summary>
                Presigned post policy
            </summary>
            <param name="policy"></param>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClient.StatObjectAsync(Minio.DataModel.Args.StatObjectArgs,System.Threading.CancellationToken)">
            <summary>
                Tests the object's existence and returns metadata about existing objects.
            </summary>
            <param name="args">
                StatObjectArgs Arguments Object encapsulates information like - bucket name, object name,
                server-side encryption object
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Facts about the object</returns>
        </member>
        <member name="M:Minio.MinioClient.GetMultipartUploadsListAsync(Minio.DataModel.Args.GetMultipartUploadsListArgs,System.Threading.CancellationToken)">
            <summary>
                Get list of multi-part uploads matching particular uploadIdMarker
            </summary>
            <param name="args">GetMultipartUploadsListArgs Arguments Object which encapsulates bucket name, prefix, recursive</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClient.RemoveUploadAsync(Minio.DataModel.Args.RemoveUploadArgs,System.Threading.CancellationToken)">
            <summary>
                Remove object with matching uploadId from bucket
            </summary>
            <param name="args">RemoveUploadArgs Arguments Object which encapsulates bucket, object names, upload Id</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClient.PutObjectSinglePartAsync(Minio.DataModel.Args.PutObjectArgs,System.Threading.CancellationToken,System.Boolean)">
            <summary>
                Upload object part to bucket for particular uploadId
            </summary>
            <param name="args">
                PutObjectArgs encapsulates bucket name, object name, upload id, part number, object data(body),
                Headers, SSE Headers
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <param name="singleFile">
                This boolean parameter differentiates single part file upload and
                multi part file upload as this function is shared by both.
            </param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.ObjectDisposedException">The file stream has been disposed</exception>
            <exception cref="T:System.NotSupportedException">The file stream cannot be read from</exception>
            <exception cref="T:System.InvalidOperationException">The file stream is currently in a read operation</exception>
            <exception cref="T:Minio.Exceptions.AccessDeniedException">For encrypted PUT operation, Access is denied if the key is wrong</exception>
        </member>
        <member name="M:Minio.MinioClient.PutObjectPartAsync(Minio.DataModel.Args.PutObjectPartArgs,System.Threading.CancellationToken)">
            <summary>
                Upload object in multiple parts. Private Helper function
            </summary>
            <param name="args">PutObjectPartArgs encapsulates bucket name, object name, upload id, part number, object data(body)</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.ObjectDisposedException">The file stream has been disposed</exception>
            <exception cref="T:System.NotSupportedException">The file stream cannot be read from</exception>
            <exception cref="T:System.InvalidOperationException">The file stream is currently in a read operation</exception>
            <exception cref="T:Minio.Exceptions.AccessDeniedException">For encrypted PUT operation, Access is denied if the key is wrong</exception>
        </member>
        <member name="M:Minio.MinioClient.MultipartCopyUploadAsync(Minio.DataModel.Args.MultipartCopyUploadArgs,System.Threading.CancellationToken)">
            <summary>
                Make a multi part copy upload for objects larger than 5GB or if CopyCondition specifies a byte range.
            </summary>
            <param name="args">
                MultipartCopyUploadArgs Arguments object encapsulating destination and source bucket, object names,
                copy conditions, size, metadata, SSE
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.AccessDeniedException">For encrypted copy operation, Access is denied if the key is wrong</exception>
        </member>
        <member name="M:Minio.MinioClient.NewMultipartUploadAsync(Minio.DataModel.Args.NewMultipartUploadPutArgs,System.Threading.CancellationToken)">
            <summary>
                Start a new multi-part upload request
            </summary>
            <param name="args">
                NewMultipartUploadPutArgs arguments object encapsulating bucket name, object name, Headers, SSE
                Headers
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.AccessDeniedException">For encrypted copy operation, Access is denied if the key is wrong</exception>
        </member>
        <member name="M:Minio.MinioClient.NewMultipartUploadAsync(Minio.DataModel.Args.NewMultipartUploadCopyArgs,System.Threading.CancellationToken)">
            <summary>
                Start a new multi-part copy upload request
            </summary>
            <param name="args">
                NewMultipartUploadCopyArgs arguments object encapsulating bucket name, object name, Headers, SSE
                Headers
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.AccessDeniedException">For encrypted copy operation, Access is denied if the key is wrong</exception>
        </member>
        <member name="M:Minio.MinioClient.CopyObjectRequestAsync(Minio.DataModel.Args.CopyObjectRequestArgs,System.Threading.CancellationToken)">
            <summary>
                Create the copy request, execute it and return the copy result.
            </summary>
            <param name="args"> CopyObjectRequestArgs Arguments Object encapsulating </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
        </member>
        <member name="M:Minio.MinioClient.CompleteMultipartUploadAsync(Minio.DataModel.Args.CompleteMultipartUploadArgs,System.Threading.CancellationToken)">
            <summary>
                Internal method to complete multi part upload of object to server.
            </summary>
            <param name="args">CompleteMultipartUploadArgs Arguments object with bucket name, object name, upload id, Etags</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.AccessDeniedException">For encrypted copy operation, Access is denied if the key is wrong</exception>
        </member>
        <member name="M:Minio.MinioClient.ReadFullAsync(System.IO.Stream,System.Int32)">
            <summary>
                Advances in the stream upto currentPartSize or End of Stream
            </summary>
            <param name="data"></param>
            <param name="currentPartSize"></param>
            <returns>bytes read in a byte array</returns>
        </member>
        <member name="M:Minio.MinioClient.GetObjectHelper(Minio.DataModel.Args.GetObjectArgs,System.Threading.CancellationToken)">
            <summary>
                private helper method to remove list of objects from bucket
            </summary>
            <param name="args">GetObjectArgs Arguments Object encapsulates information like - bucket name, object name etc </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
        </member>
        <member name="M:Minio.MinioClient.GetObjectFileAsync(Minio.DataModel.Args.GetObjectArgs,Minio.DataModel.ObjectStat,System.Threading.CancellationToken)">
            <summary>
                private helper method return the specified object from the bucket
            </summary>
            <param name="args">GetObjectArgs Arguments Object encapsulates information like - bucket name, object name etc </param>
            <param name="objectStat"> ObjectStat object encapsulates information like - object name, size, etag etc </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
        </member>
        <member name="M:Minio.MinioClient.GetObjectStreamAsync(Minio.DataModel.Args.GetObjectArgs,System.Threading.CancellationToken)">
            <summary>
                private helper method. It returns the specified portion or full object from the bucket
            </summary>
            <param name="args">GetObjectArgs Arguments Object encapsulates information like - bucket name, object name etc </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
        </member>
        <member name="M:Minio.MinioClient.RemoveBucketObjectsAsync(Minio.DataModel.Args.RemoveObjectsArgs,System.Threading.CancellationToken)">
            <summary>
                private helper method to remove list of objects from bucket
            </summary>
            <param name="args">
                RemoveObjectsArgs Arguments Object encapsulates information like - bucket name, List of objects,
                optional list of versions (for each object) to be deleted
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.CallRemoveObjectVersions(Minio.DataModel.Args.RemoveObjectsArgs,System.Collections.Generic.IList{System.Tuple{System.String,System.String}},System.Collections.Generic.List{Minio.Exceptions.DeleteError},System.Threading.CancellationToken)">
            <summary>
                private helper method to call remove objects function
            </summary>
            <param name="args">
                RemoveObjectsArgs Arguments Object encapsulates information like - bucket name, List of objects,
                optional version Id list
            </param>
            <param name="objVersions">List of Tuples. Each tuple is Object name to List of Version IDs to be deleted</param>
            <param name="fullErrorsList">
                Full List of DeleteError objects. The error list from this call will be added to the full
                list.
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClient.CallRemoveObjects(Minio.DataModel.Args.RemoveObjectsArgs,System.Collections.Generic.IList{System.String},System.Collections.Generic.List{Minio.Exceptions.DeleteError},System.Threading.CancellationToken)">
            <summary>
                private helper method to call function to remove objects/version items in iterations of 1000 each from bucket
            </summary>
            <param name="args">
                RemoveObjectsArgs Arguments Object encapsulates information like - bucket name, List of objects,
                optional list of versions (for each object) to be deleted
            </param>
            <param name="objNames">List of Object names to be deleted</param>
            <param name="fullErrorsList">
                Full List of DeleteError objects. The error list from this call will be added to the full
                list.
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClient.RemoveObjectVersionsHelper(Minio.DataModel.Args.RemoveObjectsArgs,System.Collections.Generic.List{Minio.Exceptions.DeleteError},System.Threading.CancellationToken)">
            <summary>
                private helper method to remove objects/version items in iterations of 1000 each from bucket
            </summary>
            <param name="args">
                RemoveObjectsArgs Arguments Object encapsulates information like - bucket name, List of objects,
                optional list of versions (for each object) to be deleted
            </param>
            <param name="fullErrorsList">
                Full List of DeleteError objects. The error list from this call will be added to the full
                list.
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.RemoveObjectsHelper(Minio.DataModel.Args.RemoveObjectsArgs,System.Collections.Generic.IList{Minio.Exceptions.DeleteError},System.Threading.CancellationToken)">
            <summary>
                private helper method to remove objects in iterations of 1000 each from bucket
            </summary>
            <param name="args">
                RemoveObjectsArgs Arguments Object encapsulates information like - bucket name, List of objects,
                optional list of versions (for each object) to be deleted
            </param>
            <param name="fullErrorsList">
                Full List of DeleteError objects. The error list from this call will be added to the full
                list.
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.MinioClient.#ctor">
            <summary>
                Creates and returns an MinIO Client
            </summary>
            <returns>Client with no arguments to be used with other builder methods</returns>
        </member>
        <member name="P:Minio.MinioClient.DefaultErrorHandler">
            <summary>
                Default error handling delegate
            </summary>
        </member>
        <member name="M:Minio.MinioClient.WrapperGetAsync(System.Uri)">
            <summary>
                Runs httpClient's GetAsync method
            </summary>
        </member>
        <member name="M:Minio.MinioClient.WrapperPutAsync(System.Uri,System.Net.Http.StreamContent)">
            <summary>
                Runs httpClient's PutObjectAsync method
            </summary>
        </member>
        <member name="M:Minio.MinioClient.SetTraceOn(Minio.Handlers.IRequestLogger)">
            <summary>
                Sets HTTP tracing On.Writes output to Console
            </summary>
        </member>
        <member name="M:Minio.MinioClient.SetTraceOff">
            <summary>
                Sets HTTP tracing Off.
            </summary>
        </member>
        <member name="M:Minio.MinioClient.ParseError(Minio.DataModel.Result.ResponseResult)">
            <summary>
                Parse response errors if any and return relevant error messages
            </summary>
            <param name="response"></param>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.MakeBucketAsync(Minio.DataModel.Args.MakeBucketArgs,System.Threading.CancellationToken)">
            <summary>
                Create a bucket with the given name.
            </summary>
            <param name="args">MakeBucketArgs Arguments Object that has bucket info like name, location. etc</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucketName is invalid</exception>
            <exception cref="T:System.NotImplementedException">When object-lock or another extension is not implemented</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.ListBucketsAsync(System.Threading.CancellationToken)">
            <summary>
                List all objects in a bucket
            </summary>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Task with an iterator lazily populated with objects</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.BucketExistsAsync(Minio.DataModel.Args.BucketExistsArgs,System.Threading.CancellationToken)">
            <summary>
                Check if a private bucket with the given name exists.
            </summary>
            <param name="args">BucketExistsArgs Arguments Object which has bucket identifier information - bucket name, region</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.RemoveBucketAsync(Minio.DataModel.Args.RemoveBucketArgs,System.Threading.CancellationToken)">
            <summary>
                Remove the bucket with the given name.
            </summary>
            <param name="args">RemoveBucketArgs Arguments Object which has bucket identifier information like bucket name .etc.</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.ListObjectsAsync(Minio.DataModel.Args.ListObjectsArgs,System.Threading.CancellationToken)">
            <summary>
                List all objects non-recursively in a bucket with a given prefix, optionally emulating a directory
            </summary>
            <param name="args">
                ListObjectsArgs Arguments Object with information like Bucket name, prefix, recursive listing,
                versioning
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>An observable of items that client can subscribe to</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.InvalidOperationException">
                For example, if you call ListObjectsAsync on a bucket with versioning
                enabled or object lock enabled
            </exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.GetBucketNotificationsAsync(Minio.DataModel.Args.GetBucketNotificationsArgs,System.Threading.CancellationToken)">
            <summary>
                Gets notification configuration for this bucket
            </summary>
            <param name="args">GetBucketNotificationsArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.SetBucketNotificationsAsync(Minio.DataModel.Args.SetBucketNotificationsArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the notification configuration for this bucket
            </summary>
            <param name="args">
                SetBucketNotificationsArgs Arguments Object with information like Bucket name, notification object
                with configuration to set
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.RemoveAllBucketNotificationsAsync(Minio.DataModel.Args.RemoveAllBucketNotificationsArgs,System.Threading.CancellationToken)">
            <summary>
                Removes all bucket notification configurations stored on the server.
            </summary>
            <param name="args">RemoveAllBucketNotificationsArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.ListenBucketNotificationsAsync(Minio.DataModel.Args.ListenBucketNotificationsArgs,System.Threading.CancellationToken)">
            <summary>
                Subscribes to bucket change notifications (a Minio-only extension)
            </summary>
            <param name="args">
                ListenBucketNotificationsArgs Arguments Object with information like Bucket name, listen events,
                prefix filter keys, suffix fileter keys
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>An observable of JSON-based notification events</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.GetBucketTagsAsync(Minio.DataModel.Args.GetBucketTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Gets Tagging values set for this bucket
            </summary>
            <param name="args">GetBucketTagsArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Tagging Object with key-value tag pairs</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.SetBucketTagsAsync(Minio.DataModel.Args.SetBucketTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Tagging values for this bucket
            </summary>
            <param name="args">SetBucketTagsArgs Arguments Object with information like Bucket name, tag key-value pairs</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.RemoveBucketTagsAsync(Minio.DataModel.Args.RemoveBucketTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Removes Tagging values stored for the bucket.
            </summary>
            <param name="args">RemoveBucketTagsArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.SetObjectLockConfigurationAsync(Minio.DataModel.Args.SetObjectLockConfigurationArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Object Lock Configuration on this bucket
            </summary>
            <param name="args">
                SetObjectLockConfigurationArgs Arguments Object with information like Bucket name, object lock
                configuration to set
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.GetObjectLockConfigurationAsync(Minio.DataModel.Args.GetObjectLockConfigurationArgs,System.Threading.CancellationToken)">
            <summary>
                Gets the Object Lock Configuration on this bucket
            </summary>
            <param name="args">GetObjectLockConfigurationArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>ObjectLockConfiguration object</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.RemoveObjectLockConfigurationAsync(Minio.DataModel.Args.RemoveObjectLockConfigurationArgs,System.Threading.CancellationToken)">
            <summary>
                Removes the Object Lock Configuration on this bucket
            </summary>
            <param name="args">RemoveObjectLockConfigurationArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.GetVersioningAsync(Minio.DataModel.Args.GetVersioningArgs,System.Threading.CancellationToken)">
            <summary>
                Get Versioning information on the bucket with given bucket name
            </summary>
            <param name="args">GetVersioningArgs takes bucket as argument. </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> GetVersioningResponse with information populated from REST response </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.SetVersioningAsync(Minio.DataModel.Args.SetVersioningArgs,System.Threading.CancellationToken)">
            <summary>
                Set Versioning as specified on the bucket with given bucket name
            </summary>
            <param name="args">SetVersioningArgs Arguments Object with information like Bucket name, Versioning configuration</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.SetBucketEncryptionAsync(Minio.DataModel.Args.SetBucketEncryptionArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Encryption Configuration for the bucket.
            </summary>
            <param name="args">SetBucketEncryptionArgs Arguments Object with information like Bucket name, encryption config</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.GetBucketEncryptionAsync(Minio.DataModel.Args.GetBucketEncryptionArgs,System.Threading.CancellationToken)">
            <summary>
                Returns the Encryption Configuration for the bucket.
            </summary>
            <param name="args">GetBucketEncryptionArgs Arguments Object encapsulating information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> An object of type ServerSideEncryptionConfiguration  </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.RemoveBucketEncryptionAsync(Minio.DataModel.Args.RemoveBucketEncryptionArgs,System.Threading.CancellationToken)">
            <summary>
                Removes the Encryption Configuration for the bucket.
            </summary>
            <param name="args">RemoveBucketEncryptionArgs Arguments Object encapsulating information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.SetBucketLifecycleAsync(Minio.DataModel.Args.SetBucketLifecycleArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Lifecycle configuration for this bucket
            </summary>
            <param name="args">SetBucketLifecycleArgs Arguments Object with information like Bucket name, tag key-value pairs</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.GetBucketLifecycleAsync(Minio.DataModel.Args.GetBucketLifecycleArgs,System.Threading.CancellationToken)">
            <summary>
                Gets Lifecycle configuration set for this bucket returned in an object
            </summary>
            <param name="args">GetBucketLifecycleArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Lifecycle Object with key-value tag pairs</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.RemoveBucketLifecycleAsync(Minio.DataModel.Args.RemoveBucketLifecycleArgs,System.Threading.CancellationToken)">
            <summary>
                Removes Lifecycle configuration stored for the bucket.
            </summary>
            <param name="args">RemoveBucketLifecycleArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.GetBucketReplicationAsync(Minio.DataModel.Args.GetBucketReplicationArgs,System.Threading.CancellationToken)">
            <summary>
                Gets Replication configuration set for this bucket
            </summary>
            <param name="args">GetBucketReplicationArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Replication configuration object</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.MissingBucketReplicationConfigurationException">When bucket replication configuration is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.SetBucketReplicationAsync(Minio.DataModel.Args.SetBucketReplicationArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Replication configuration for this bucket
            </summary>
            <param name="args">
                SetBucketReplicationArgs Arguments Object with information like Bucket name, Replication
                Configuration object
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.MissingBucketReplicationConfigurationException">When bucket replication configuration is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IBucketOperations.RemoveBucketReplicationAsync(Minio.DataModel.Args.RemoveBucketReplicationArgs,System.Threading.CancellationToken)">
            <summary>
                Removes Replication configuration stored for the bucket.
            </summary>
            <param name="args">RemoveBucketReplicationArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.MissingBucketReplicationConfigurationException">When bucket replication configuration is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.GetObjectLegalHoldAsync(Minio.DataModel.Args.GetObjectLegalHoldArgs,System.Threading.CancellationToken)">
            <summary>
                Get the configuration object for Legal Hold Status
            </summary>
            <param name="args">
                GetObjectLegalHoldArgs Arguments Object which has object identifier information - bucket name,
                object name, version ID
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation </param>
            <returns> True if Legal Hold is ON, false otherwise  </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.SetObjectLegalHoldAsync(Minio.DataModel.Args.SetObjectLegalHoldArgs,System.Threading.CancellationToken)">
            <summary>
                Set the configuration for Legal Hold Status
            </summary>
            <param name="args">
                SetObjectLegalHoldArgs Arguments Object which has object identifier information - bucket name,
                object name, version ID and the status (ON/OFF) of legal-hold
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation </param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.SetObjectRetentionAsync(Minio.DataModel.Args.SetObjectRetentionArgs,System.Threading.CancellationToken)">
            <summary>
                Set the Retention using the configuration object
            </summary>
            <param name="args">
                SetObjectRetentionArgs Arguments Object which has object identifier information - bucket name,
                object name, version ID
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.GetObjectRetentionAsync(Minio.DataModel.Args.GetObjectRetentionArgs,System.Threading.CancellationToken)">
            <summary>
                Get the Retention configuration for the object
            </summary>
            <param name="args">
                GetObjectRetentionArgs Arguments Object which has object identifier information - bucket name,
                object name, version ID
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> ObjectRetentionConfiguration object which contains the Retention configuration </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.ClearObjectRetentionAsync(Minio.DataModel.Args.ClearObjectRetentionArgs,System.Threading.CancellationToken)">
            <summary>
                Clears the Retention configuration for the object
            </summary>
            <param name="args">
                ClearObjectRetentionArgs Arguments Object which has object identifier information - bucket name,
                object name, version ID
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns> Task </returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MissingObjectLockConfigurationException">When object lock configuration on bucket is not set</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.RemoveObjectAsync(Minio.DataModel.Args.RemoveObjectArgs,System.Threading.CancellationToken)">
            <summary>
                Removes an object with given name in specific bucket
            </summary>
            <param name="args">
                RemoveObjectArgs Arguments Object encapsulates information like - bucket name, object name, whether
                delete all versions
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.RemoveObjectsAsync(Minio.DataModel.Args.RemoveObjectsArgs,System.Threading.CancellationToken)">
            <summary>
                Removes list of objects from bucket
            </summary>
            <param name="args">
                RemoveObjectsArgs Arguments Object encapsulates information like - bucket name, List of objects,
                optional list of versions (for each object) to be deleted
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Observable that returns delete error while deleting objects if any</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.CopyObjectAsync(Minio.DataModel.Args.CopyObjectArgs,System.Threading.CancellationToken)">
            <summary>
                Copy a source object into a new destination object.
            </summary>
            <param name="args">
                CopyObjectArgs Arguments Object which encapsulates bucket name, object name, destination bucket,
                destination object names, Copy conditions object, metadata, SSE source, destination objects
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.AccessDeniedException">For encrypted copy operation, Access is denied if the key is wrong</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.GetObjectAsync(Minio.DataModel.Args.GetObjectArgs,System.Threading.CancellationToken)">
            <summary>
                Get an object. The object will be streamed to the callback given by the user.
            </summary>
            <param name="args">
                GetObjectArgs Arguments Object encapsulates information like - bucket name, object name, server-side
                encryption object, action stream, length, offset
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">If the directory to copy to is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.PutObjectAsync(Minio.DataModel.Args.PutObjectArgs,System.Threading.CancellationToken)">
            <summary>
                Creates object in a bucket fom input stream or filename.
            </summary>
            <param name="args">
                PutObjectArgs Arguments object encapsulating bucket name, object name, file name, object data
                stream, object size, content type.
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.IO.FileNotFoundException">If the file to copy from not found</exception>
            <exception cref="T:System.ObjectDisposedException">The file stream has been disposed</exception>
            <exception cref="T:System.NotSupportedException">The file stream cannot be read from</exception>
            <exception cref="T:System.InvalidOperationException">The file stream is currently in a read operation</exception>
            <exception cref="T:Minio.Exceptions.AccessDeniedException">For encrypted PUT operation, Access is denied if the key is wrong</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.SelectObjectContentAsync(Minio.DataModel.Args.SelectObjectContentArgs,System.Threading.CancellationToken)">
            <summary>
                Select an object's content. The object will be streamed to the callback given by the user.
            </summary>
            <param name="args">
                SelectObjectContentArgs Arguments Object which encapsulates bucket name, object name, Select Object
                Options
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.ListIncompleteUploads(Minio.DataModel.Args.ListIncompleteUploadsArgs,System.Threading.CancellationToken)">
            <summary>
                Lists all incomplete uploads in a given bucket and prefix recursively
            </summary>
            <param name="args">ListIncompleteUploadsArgs Arguments Object which encapsulates bucket name, prefix, recursive</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>A lazily populated list of incomplete uploads</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key provided is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.RemoveIncompleteUploadAsync(Minio.DataModel.Args.RemoveIncompleteUploadArgs,System.Threading.CancellationToken)">
            <summary>
                Remove incomplete uploads from a given bucket and objectName
            </summary>
            <param name="args">RemoveIncompleteUploadArgs Arguments Object which encapsulates bucket, object names</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.PresignedGetObjectAsync(Minio.DataModel.Args.PresignedGetObjectArgs)">
            <summary>
                Presigned get url - returns a presigned url to access an object's data without credentials.URL can have a maximum
                expiry of
                up to 7 days or a minimum of 1 second.Additionally, you can override a set of response headers using reqParams.
            </summary>
            <param name="args">
                PresignedGetObjectArgs Arguments object encapsulating bucket and object names, expiry time, response
                headers, request date
            </param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.PresignedPostPolicyAsync(Minio.DataModel.Args.PresignedPostPolicyArgs)">
            <summary>
                Presigned post policy
            </summary>
            <param name="args">PresignedPostPolicyArgs Arguments object encapsulating Policy, Expiry, Region, </param>
            <returns>Tuple of URI and Policy Form data</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.PresignedPutObjectAsync(Minio.DataModel.Args.PresignedPutObjectArgs)">
            <summary>
                Presigned Put url -returns a presigned url to upload an object without credentials.URL can have a maximum expiry of
                upto 7 days or a minimum of 1 second.
            </summary>
            <param name="args">PresignedPutObjectArgs Arguments Object which encapsulates bucket, object names, expiry</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.StatObjectAsync(Minio.DataModel.Args.StatObjectArgs,System.Threading.CancellationToken)">
            <summary>
                Tests the object's existence and returns metadata about existing objects.
            </summary>
            <param name="args">
                StatObjectArgs Arguments Object encapsulates information like - bucket name, object name,
                server-side encryption object
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Facts about the object</returns>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.PresignedPostPolicyAsync(Minio.DataModel.PostPolicy)">
            <summary>
                Presigned post policy
            </summary>
            <param name="policy"></param>
            <returns></returns>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.GetObjectTagsAsync(Minio.DataModel.Args.GetObjectTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Gets Tagging values set for this object
            </summary>
            <param name="args"> GetObjectTagsArgs Arguments Object with information like Bucket, Object name, (optional)version Id</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>Tagging Object with key-value tag pairs</returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.SetObjectTagsAsync(Minio.DataModel.Args.SetObjectTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Sets the Tagging values for this object
            </summary>
            <param name="args">
                SetObjectTagsArgs Arguments Object with information like Bucket name,Object name, (optional)version
                Id, tag key-value pairs
            </param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="M:Minio.ApiEndpoints.IObjectOperations.RemoveObjectTagsAsync(Minio.DataModel.Args.RemoveObjectTagsArgs,System.Threading.CancellationToken)">
            <summary>
                Removes Tagging values stored for the object
            </summary>
            <param name="args">RemoveObjectTagsArgs Arguments Object with information like Bucket name</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns></returns>
            <exception cref="T:Minio.Exceptions.AuthorizationException">When access or secret key is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidBucketNameException">When bucket name is invalid</exception>
            <exception cref="T:Minio.Exceptions.InvalidObjectNameException">When object name is invalid</exception>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucket is not found</exception>
            <exception cref="T:System.NotImplementedException">When a functionality or extension is not implemented</exception>
            <exception cref="T:Minio.Exceptions.ObjectNotFoundException">When object is not found</exception>
            <exception cref="T:Minio.Exceptions.MalFormedXMLException">When configuration XML provided is invalid</exception>
        </member>
        <member name="T:Minio.AWSS3Endpoints">
            <summary>
                Amazon AWS S3 endpoints for various regions.
            </summary>
        </member>
        <member name="M:Minio.AWSS3Endpoints.Endpoint(System.String)">
            <summary>
                Gets Amazon S3 endpoint for the relevant region.
            </summary>
            <param name="region"></param>
            <returns></returns>
        </member>
        <member name="T:Minio.BucketRegionCache">
            <summary>
                A singleton bucket/region cache map.
            </summary>
        </member>
        <member name="M:Minio.BucketRegionCache.Region(System.String)">
            <summary>
                Returns AWS region for given bucket name.
            </summary>
            <param name="bucketName"></param>
            <returns></returns>
        </member>
        <member name="M:Minio.BucketRegionCache.Add(System.String,System.String)">
            <summary>
                Adds bucket name and its region to BucketRegionCache.
            </summary>
            <param name="bucketName"></param>
            <param name="region"></param>
        </member>
        <member name="M:Minio.BucketRegionCache.Remove(System.String)">
            <summary>
                Removes region cache of the bucket if any.
            </summary>
            <param name="bucketName"></param>
        </member>
        <member name="M:Minio.BucketRegionCache.Exists(System.String)">
            <summary>
                Returns true if given bucket name is in the map else false.
            </summary>
            <param name="bucketName"></param>
            <returns></returns>
        </member>
        <member name="M:Minio.BucketRegionCache.Update(Minio.IMinioClient,System.String)">
            <summary>
                Updates Region cache for given bucket.
            </summary>
            <param name="client"></param>
            <param name="bucketName"></param>
        </member>
        <member name="T:Minio.DataModel.CopyConditions">
            <summary>
                A container class to hold all the Conditions to be checked before copying an object.
            </summary>
        </member>
        <member name="P:Minio.DataModel.CopyConditions.ByteRange">
            <summary>
                Get range size
            </summary>
            <returns></returns>
        </member>
        <member name="P:Minio.DataModel.CopyConditions.Conditions">
            <summary>
                Get all the set copy conditions map.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Minio.DataModel.CopyConditions.Clone">
            <summary>
                Clone CopyConditions object
            </summary>
            <returns>new CopyConditions object</returns>
        </member>
        <member name="M:Minio.DataModel.CopyConditions.SetModified(System.DateTime)">
            <summary>
                Set modified condition, copy object modified since given time.
            </summary>
            <param name="date"></param>
            <exception cref="T:System.ArgumentException">When date is null</exception>
        </member>
        <member name="M:Minio.DataModel.CopyConditions.SetUnmodified(System.DateTime)">
            <summary>
                Unset modified condition, copy object modified since given time.
            </summary>
            <param name="date"></param>
            <exception cref="T:System.ArgumentException">When date is null</exception>
        </member>
        <member name="M:Minio.DataModel.CopyConditions.SetMatchETag(System.String)">
            <summary>
                Set matching ETag condition, copy object which matches
                the following ETag.
            </summary>
            <param name="etag"></param>
            <exception cref="T:System.ArgumentException">When etag is null</exception>
        </member>
        <member name="M:Minio.DataModel.CopyConditions.SetMatchETagNone(System.String)">
            <summary>
                Set matching ETag none condition, copy object which does not
                match the following ETag.
            </summary>
            <param name="etag"></param>
            <exception cref="T:System.ArgumentException">When etag is null</exception>
        </member>
        <member name="M:Minio.DataModel.CopyConditions.SetReplaceMetadataDirective">
            <summary>
                Set replace metadata directive which specifies that server side copy needs to replace metadata
                on destination with custom metadata provided in the request.
            </summary>
        </member>
        <member name="M:Minio.DataModel.CopyConditions.HasReplaceMetadataDirective">
            <summary>
                Return true if replace metadata directive is specified
            </summary>
            <returns></returns>
        </member>
        <member name="M:Minio.DataModel.CopyConditions.SetByteRange(System.Int64,System.Int64)">
            <summary>
                Set Byte Range condition, copy object which falls within the
                start and end byte range specified by user
            </summary>
            <param name="firstByte"></param>
            <param name="lastByte"></param>
            <exception cref="T:System.ArgumentException">When firstByte is null or lastByte is null</exception>
        </member>
        <member name="T:Minio.DataModel.Encryption.IServerSideEncryption">
            <summary>
                ServerSideEncryption interface
            </summary>
        </member>
        <member name="T:Minio.DataModel.Encryption.SSEC">
            <summary>
                Server-side encryption with customer provided keys (SSE-C)
            </summary>
        </member>
        <member name="T:Minio.DataModel.Encryption.SSECopy">
            <summary>
                Server-side encryption option for source side SSE-C copy operation
            </summary>
        </member>
        <member name="T:Minio.DataModel.Encryption.SSEKMS">
            <summary>
                Server-side encryption with AWS KMS managed keys
            </summary>
        </member>
        <member name="M:Minio.DataModel.Encryption.SSEKMS.MarshalContext">
            <summary>
                Serialize context into JSON string.
            </summary>
            <returns>Serialized JSON context</returns>
        </member>
        <member name="T:Minio.DataModel.Encryption.SSES3">
            <summary>
                Server-side encryption with S3 managed encryption keys (SSE-S3)
            </summary>
        </member>
        <member name="T:Minio.DataModel.Notification.Arn">
            <summary>
                Arn holds ARN information that will be sent to the web service,
                ARN desciption can be found in http://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html
            </summary>
        </member>
        <member name="M:Minio.DataModel.Notification.Arn.#ctor(System.String)">
            <summary>
                Pass valid Arn string on aws to constructor
            </summary>
            <param name="arnString"></param>
        </member>
        <member name="M:Minio.DataModel.Notification.Arn.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
                Constructs new ARN based on the given partition, service, region, account id and resource
            </summary>
            <param name="partition"></param>
            <param name="service"></param>
            <param name="region"></param>
            <param name="accountId"></param>
            <param name="resource"></param>
        </member>
        <member name="T:Minio.DataModel.Notification.BucketNotification">
            <summary>
                Helper class to parse NotificationConfiguration from AWS S3 response XML.
            </summary>
        </member>
        <member name="M:Minio.DataModel.Notification.BucketNotification.AddTopic(Minio.DataModel.Notification.TopicConfig)">
            <summary>
                AddTopic adds a given topic config to the general bucket notification config
            </summary>
            <param name="topicConfig"></param>
        </member>
        <member name="M:Minio.DataModel.Notification.BucketNotification.AddQueue(Minio.DataModel.Notification.QueueConfig)">
            <summary>
                AddQueue adds a given queue config to the general bucket notification config
            </summary>
            <param name="queueConfig"></param>
        </member>
        <member name="M:Minio.DataModel.Notification.BucketNotification.AddLambda(Minio.DataModel.Notification.LambdaConfig)">
            <summary>
                AddLambda adds a given lambda config to the general bucket notification config
            </summary>
            <param name="lambdaConfig"></param>
        </member>
        <member name="M:Minio.DataModel.Notification.BucketNotification.RemoveTopicByArn(Minio.DataModel.Notification.Arn)">
            <summary>
                RemoveTopicByArn removes all topic configurations that match the exact specified ARN
            </summary>
            <param name="topicArn"></param>
        </member>
        <member name="M:Minio.DataModel.Notification.BucketNotification.RemoveQueueByArn(Minio.DataModel.Notification.Arn)">
            <summary>
                RemoveQueueByArn removes all queue configurations that match the exact specified ARN
            </summary>
            <param name="queueArn"></param>
        </member>
        <member name="M:Minio.DataModel.Notification.BucketNotification.RemoveLambdaByArn(Minio.DataModel.Notification.Arn)">
            <summary>
                RemoveLambdaByArn removes all lambda configurations that match the exact specified ARN
            </summary>
            <param name="lambdaArn"></param>
        </member>
        <member name="M:Minio.DataModel.Notification.BucketNotification.ShouldSerializeLambdaConfigs">
            <summary>
                Helper methods to guide XMLSerializer
            </summary>
            <returns></returns>
        </member>
        <member name="M:Minio.DataModel.Notification.BucketNotification.ToXML">
            <summary>
                Serializes the notification configuration as an XML string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Minio.DataModel.Notification.EventType">
            <summary>
                EventType is a S3 notification event associated to the bucket notification configuration
            </summary>
        </member>
        <member name="T:Minio.DataModel.Notification.FilterRule">
            <summary>
                FilterRule - child of S3Key, a tag in the notification xml which
                carries suffix/prefix filters
            </summary>
        </member>
        <member name="T:Minio.DataModel.Notification.LambdaConfig">
            <summary>
                LambdaConfig carries one single cloudfunction notification configuration
            </summary>
        </member>
        <member name="T:Minio.DataModel.Notification.MinioNotification">
            <summary>
                Helper class to deserialize notifications generated
                from MinioNotificaitonRaw by ListenBucketNotifications
            </summary>
        </member>
        <member name="T:Minio.DataModel.Notification.MinioNotificationRaw">
            <summary>
                Stores raw json events generated by ListenBucketNotifications
                The Minio client doesn't depend on a JSON library so we can let
                the caller use a library of their choice
            </summary>
        </member>
        <member name="T:Minio.DataModel.Notification.NotificationConfiguration">
            <summary>
                NotificationConfig - represents one single notification configuration
                such as topic, queue or lambda configuration
            </summary>
        </member>
        <member name="M:Minio.DataModel.Notification.NotificationConfiguration.AddFilterSuffix(System.String)">
            <summary>
                AddFilterSuffix sets the suffix configuration to the current notification config
            </summary>
            <param name="suffix"></param>
        </member>
        <member name="M:Minio.DataModel.Notification.NotificationConfiguration.AddFilterPrefix(System.String)">
            <summary>
                AddFilterPrefix sets the prefix configuration to the current notification config
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="T:Minio.DataModel.Notification.QueueConfig">
            <summary>
                QueueConfig carries one single queue notification configuration
            </summary>
        </member>
        <member name="T:Minio.DataModel.Notification.S3Key">
            <summary>
                S3Key - child of Filter, a tag in the notification xml which carries suffix/prefix
                filters and allows filtering event notifications based on S3 Object key's name
            </summary>
        </member>
        <member name="T:Minio.DataModel.Notification.TopicConfig">
            <summary>
                TopicConfig carries one single topic notification configuration
            </summary>
        </member>
        <member name="M:Minio.DataModel.Notification.TopicConfig.Equals(System.Object)">
            <summary>
                Implement equality for this object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:Minio.DataModel.PostPolicy.FormData">
            <summary>
                Get the populated dictionary of policy data.
            </summary>
            <returns>Dictionary of policy data</returns>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetExpires(System.DateTime)">
            <summary>
                Set expiration policy.
            </summary>
            <param name="expiration">Expiration time for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetKey(System.String)">
            <summary>
                Set key policy.
            </summary>
            <param name="key">Object name for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetKeyStartsWith(System.String)">
            <summary>
                Set key prefix policy.
            </summary>
            <param name="keyStartsWith">Object name prefix for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetBucket(System.String)">
            <summary>
                Set bucket policy.
            </summary>
            <param name="bucket">Bucket name for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetCacheControl(System.String)">
            <summary>
                Set cache control
            </summary>
            <param name="cacheControl">CacheControl for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetContentType(System.String)">
            <summary>
                Set content type policy.
            </summary>
            <param name="contentType">ContentType for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetContentEncoding(System.String)">
            <summary>
                Set content encoding
            </summary>
            <param name="contentEncoding">ContentEncoding for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetContentLength(System.Int64)">
            <summary>
                Set content length
            </summary>
            <param name="contentLength">ContentLength for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetContentRange(System.Int64,System.Int64)">
            <summary>
                Set content range
            </summary>
            <param name="startRange">ContentRange for the policy</param>
            <param name="endRange"></param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetSessionToken(System.String)">
            <summary>
                Set session token
            </summary>
            <param name="sessionToken">set session token</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetSuccessStatusAction(System.String)">
            <summary>
                Set the success action status of the object for this policy based upload.
            </summary>
            <param name="status">Success action status</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetUserMetadata(System.String,System.String)">
            <summary>
                Set user specified metadata as a key/value couple.
            </summary>
            <param name="key">Key and Value to insert in the metadata</param>
            <param name="value"></param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetAlgorithm(System.String)">
            <summary>
                Set signature algorithm policy.
            </summary>
            <param name="algorithm">Set signature algorithm used for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetCredential(System.String)">
            <summary>
                Set credential policy.
            </summary>
            <param name="credential">Set credential string for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.SetDate(System.DateTime)">
            <summary>
                Set date policy.
            </summary>
            <param name="date">Set date for the policy</param>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.MarshalJSON">
            <summary>
                Serialize policy into JSON string.
            </summary>
            <returns>Serialized JSON policy</returns>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.Base64">
            <summary>
                Compute base64 encoded form of JSON policy.
            </summary>
            <returns>Base64 encoded string of JSON policy</returns>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.IsBucketSet">
            <summary>
                Verify if bucket is set in policy.
            </summary>
            <returns>true if bucket is set</returns>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.IsKeySet">
            <summary>
                Verify if key is set in policy.
            </summary>
            <returns>true if key is set</returns>
        </member>
        <member name="M:Minio.DataModel.PostPolicy.IsExpirationSet">
            <summary>
                Verify if expiration is set in policy.
            </summary>
            <returns>true if expiration is set</returns>
        </member>
        <member name="F:Minio.Helper.Constants.MaxParts">
            <summary>
                Maximum number of parts
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.MinimumPartSize">
            <summary>
                Minimum part size
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.MinimumPUTPartSize">
            <summary>
                Minimum PUT part size
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.MinimumCOPYPartSize">
            <summary>
                Minimum COPY part size
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.MaximumPartSize">
            <summary>
                Maximum part size
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.MaximumStreamObjectSize">
            <summary>
                Maximum streaming object size
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.MaxSinglePutObjectSize">
            <summary>
                maxSinglePutObjectSize - maximum size 5GiB of object per PUT operation
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.MaxSingleCopyObjectSize">
            <summary>
                maxSingleCopyObjectSize - 5GiB
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.MaxMultipartPutObjectSize">
            <summary>
                maxMultipartPutObjectSize - maximum size 5TiB of object for Multipart operation
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.OptimalReadBufferSize">
            <summary>
                OptimalReadBufferSize - optimal buffer 5MiB used for reading through Read operation
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.SSEGenericHeader">
            <summary>
                SSEGenericHeader is the AWS SSE header used for SSE-S3 and SSE-KMS.
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.SSEKMSKeyId">
            <summary>
                SSEKMSKeyId is the AWS SSE KMS Key-Id
            </summary>
        </member>
        <member name="F:Minio.Helper.Constants.SSEKMSContext">
            <summary>
                SSEKMSContext is the AWS SSE KMS Context.
            </summary>
        </member>
        <member name="M:Minio.Helper.RegionHelper.GetRegionFromEndpoint(System.String)">
            <summary>
                Get corresponding region for input host.
            </summary>
            <param name="endpoint">S3 API endpoint</param>
            <returns>Region corresponding to the endpoint. Default is 'us-east-1'</returns>
        </member>
        <member name="M:Minio.Helper.RequestUtil.ValidateEndpoint(System.Uri,System.String)">
            <summary>
                Validates URI to check if it is well formed. Otherwise cry foul.
            </summary>
        </member>
        <member name="M:Minio.Helper.RequestUtil.IsValidEndpoint(System.String)">
            <summary>
                Validate Url endpoint
            </summary>
            <param name="endpoint"></param>
            <returns>true/false</returns>
        </member>
        <member name="M:Minio.Helper.S3utils.IsValidIP(System.String)">
            <summary>
                IsValidIP parses input string for ip address validity.
            </summary>
            <param name="ip"></param>
            <returns></returns>
        </member>
        <member name="M:Minio.Helper.Utils.ValidateBucketName(System.String)">
            <summary>
                IsValidBucketName - verify bucket name in accordance with
                http://docs.aws.amazon.com/AmazonS3/latest/dev/UsingBucket.html
            </summary>
            <param name="bucketName">Bucket to test existence of</param>
        </member>
        <member name="M:Minio.Helper.Utils.CalculateMultiPartSize(System.Int64,System.Boolean)">
            <summary>
                Calculate part size and number of parts required.
            </summary>
            <param name="size"></param>
            <param name="copy"> If true, use COPY part size, else use PUT part size</param>
            <returns></returns>
        </member>
        <member name="M:Minio.Helper.Utils.IsValidExpiry(System.Int32)">
            <summary>
                Check if input expires value is valid.
            </summary>
            <param name="expiryInt">time to expiry in seconds</param>
            <returns>bool</returns>
        </member>
        <member name="M:Minio.LoggingExtensions.LogRequest(Minio.IMinioClient,System.Net.Http.HttpRequestMessage,Minio.DataModel.Result.ResponseResult,System.Double)">
            <summary>
                Logs the request sent to server and corresponding response
            </summary>
            <param name="minioClient"></param>
            <param name="request"></param>
            <param name="response"></param>
            <param name="durationMs"></param>
        </member>
        <member name="M:Minio.MinioClientExtensions.WithSSL(Minio.IMinioClient,System.Boolean)">
            <summary>
                Connects to Cloud Storage with HTTPS if this method is invoked on client object
            </summary>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClientExtensions.WithProxy(Minio.IMinioClient,System.Net.IWebProxy)">
            <summary>
                Uses webproxy for all requests if this method is invoked on client object.
            </summary>
            <param name="minioClient">The MinioClient instance used</param>
            <param name="proxy">Information on the proxy server in the setup.</param>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClientExtensions.WithTimeout(Minio.IMinioClient,System.Int32)">
            <summary>
                Uses the set timeout for all requests if this method is invoked on client object
            </summary>
            <param name="minioClient">The MinioClient instance used</param>
            <param name="timeout">Timeout in milliseconds.</param>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClientExtensions.WithRetryPolicy(Minio.IMinioClient,Minio.Handlers.IRetryPolicyHandler)">
            <summary>
                Allows to add retry policy handler
            </summary>
            <param name="minioClient">The MinioClient instance used</param>
            <param name="retryPolicyHandler">Delegate that will wrap execution of http client requests.</param>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClientExtensions.WithRetryPolicy(Minio.IMinioClient,System.Func{System.Func{System.Threading.Tasks.Task{Minio.DataModel.Result.ResponseResult}},System.Threading.Tasks.Task{Minio.DataModel.Result.ResponseResult}})">
            <summary>
                Allows to add retry policy handler
            </summary>
            <param name="minioClient">The MinioClient instance used</param>
            <param name="retryPolicyHandler">Delegate that will wrap execution of http client requests.</param>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClientExtensions.WithHttpClient(Minio.IMinioClient,System.Net.Http.HttpClient,System.Boolean)">
            <summary>
                Allows end user to define the Http server and pass it as a parameter
            </summary>
            <param name="minioClient">The MinioClient instance used</param>
            <param name="httpClient"> Instance of HttpClient</param>
            <param name="disposeHttpClient"> Dispose the HttpClient when leaving</param>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClientExtensions.WithCredentialsProvider(Minio.IMinioClient,Minio.Credentials.IClientProvider)">
            <summary>
                With provider for credentials and session token if being used
            </summary>
            <returns></returns>
        </member>
        <member name="M:Minio.MinioClientExtensions.SetAppInfo(Minio.IMinioClient,System.String,System.String)">
            <summary>
                Sets app version and name. Used for constructing User-Agent header in all HTTP requests
            </summary>
            <param name="minioClient"></param>
            <param name="appName"></param>
            <param name="appVersion"></param>
        </member>
        <member name="P:Minio.MinioConfig.FullUserAgent">
            <summary>
                Returns the User-Agent header for the request
            </summary>
        </member>
        <member name="M:Minio.RequestExtensions.WrapperPutAsync(Minio.IMinioClient,System.String,System.Net.Http.StreamContent)">
            <summary>
                Runs httpClient's PutObjectAsync method
            </summary>
        </member>
        <member name="M:Minio.RequestExtensions.ExecuteTaskAsync(Minio.IMinioClient,System.Collections.Generic.IEnumerable{Minio.Handlers.IApiResponseErrorHandler},Minio.HttpRequestMessageBuilder,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Actual doer that executes the request on the server
            </summary>
            <param name="minioClient"></param>
            <param name="errorHandlers">List of handlers to override default handling</param>
            <param name="requestMessageBuilder">The build of HttpRequestMessageBuilder </param>
            <param name="isSts">boolean; if true role credentials, otherwise IAM user</param>
            <param name="cancellationToken">Optional cancellation token to cancel the operation</param>
            <returns>ResponseResult</returns>
        </member>
        <member name="M:Minio.RequestExtensions.CreateRequest``1(Minio.IMinioClient,Minio.DataModel.Args.BucketArgs{``0})">
            <summary>
                Constructs a HttpRequestMessageBuilder using bucket/object names from Args.
                Calls overloaded CreateRequest method.
            </summary>
            <param name="minioClient"></param>
            <param name="args">The direct descendant of BucketArgs class, args with populated values from Input</param>
            <returns>A HttpRequestMessageBuilder</returns>
        </member>
        <member name="M:Minio.RequestExtensions.CreateRequest``1(Minio.IMinioClient,Minio.DataModel.Args.ObjectArgs{``0})">
            <summary>
                Constructs a HttpRequestMessage using bucket/object names from Args.
                Calls overloaded CreateRequest method.
            </summary>
            <param name="minioClient"></param>
            <param name="args">The direct descendant of ObjectArgs class, args with populated values from Input</param>
            <returns>A HttpRequestMessage</returns>
        </member>
        <member name="M:Minio.RequestExtensions.CreateRequest(Minio.IMinioClient,System.Net.Http.HttpMethod,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.ReadOnlyMemory{System.Byte},System.String,System.Boolean)">
            <summary>
                Constructs an HttpRequestMessage builder. For AWS, this function
                has the side-effect of overriding the baseUrl in the HttpClient
                with region specific host path or virtual style path.
            </summary>
            <param name="minioClient"></param>
            <param name="method">HTTP method</param>
            <param name="bucketName">Bucket Name</param>
            <param name="objectName">Object Name</param>
            <param name="headerMap">headerMap</param>
            <param name="contentType">Content Type</param>
            <param name="body">request body</param>
            <param name="resourcePath">query string</param>
            <param name="isBucketCreationRequest">boolean to define bucket creation</param>
            <returns>A HttpRequestMessage builder</returns>
            <exception cref="T:Minio.Exceptions.BucketNotFoundException">When bucketName is invalid</exception>
        </member>
        <member name="M:Minio.RequestExtensions.ArgsCheck(Minio.DataModel.Args.RequestArgs)">
            <summary>
                Null Check for Args object.
                Expected to be called from CreateRequest
            </summary>
            <param name="args">The child object of Args class</param>
        </member>
        <member name="M:Minio.RequestExtensions.GetRegion(Minio.IMinioClient,System.String)">
            <summary>
                Resolve region of the bucket.
            </summary>
            <param name="minioClient"></param>
            <param name="bucketName"></param>
            <returns></returns>
        </member>
        <member name="M:Minio.RequestExtensions.HandleIfErrorResponse(Minio.IMinioClient,Minio.DataModel.Result.ResponseResult,System.Collections.Generic.IEnumerable{Minio.Handlers.IApiResponseErrorHandler},System.DateTime)">
            <summary>
                Delegate errors to handlers
            </summary>
            <param name="minioClient"></param>
            <param name="response"></param>
            <param name="handlers"></param>
            <param name="startTime"></param>
        </member>
        <member name="T:Minio.V4Authenticator">
            <summary>
                V4Authenticator implements IAuthenticator interface.
            </summary>
        </member>
        <member name="M:Minio.V4Authenticator.#ctor(System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>
                Authenticator constructor.
            </summary>
            <param name="secure"></param>
            <param name="accessKey">Access key id</param>
            <param name="secretKey">Secret access key</param>
            <param name="region">Region if specifically set</param>
            <param name="sessionToken">sessionToken</param>
        </member>
        <member name="M:Minio.V4Authenticator.Authenticate(Minio.HttpRequestMessageBuilder,System.Boolean)">
            <summary>
                Implements Authenticate interface method for IAuthenticator.
            </summary>
            <param name="requestBuilder">Instantiated IRestRequest object</param>
            <param name="isSts">boolean; if true role credentials, otherwise IAM user</param>
        </member>
        <member name="M:Minio.V4Authenticator.GetCredentialString(System.DateTime,System.String,System.Boolean)">
            <summary>
                Get credential string of form {ACCESSID}/date/region/serviceKind/aws4_request.
            </summary>
            <param name="signingDate">Signature initiated date</param>
            <param name="region">Region for the credential string</param>
            <param name="isSts">boolean; if true role credentials, otherwise IAM user</param>
            <returns>Credential string for the authorization header</returns>
        </member>
        <member name="M:Minio.V4Authenticator.GetAuthorizationHeader(System.String,System.String,System.DateTime,System.String,System.Boolean)">
            <summary>
                Constructs an authorization header.
            </summary>
            <param name="signedHeaders">All signed http headers</param>
            <param name="signature">Hexadecimally encoded computed signature</param>
            <param name="signingDate">Date for signature to be signed</param>
            <param name="region">Requested region</param>
            <param name="isSts">boolean; if true role credentials, otherwise IAM user</param>
            <returns>Fully formed authorization header</returns>
        </member>
        <member name="M:Minio.V4Authenticator.GetSignedHeaders(System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
                Concatenates sorted list of signed http headers.
            </summary>
            <param name="headersToSign">Sorted dictionary of headers to be signed</param>
            <returns>All signed headers</returns>
        </member>
        <member name="M:Minio.V4Authenticator.GetService(System.Boolean)">
            <summary>
                Determines and returns the kind of service
            </summary>
            <param name="isSts">boolean; if true role credentials, otherwise IAM user</param>
            <returns>returns the kind of service as a string</returns>
        </member>
        <member name="M:Minio.V4Authenticator.GenerateSigningKey(System.String,System.DateTime,System.Boolean)">
            <summary>
                Generates signing key based on the region and date.
            </summary>
            <param name="region">Requested region</param>
            <param name="signingDate">Date for signature to be signed</param>
            <param name="isSts">boolean; if true role credentials, otherwise IAM user</param>
            <returns>bytes of computed hmac</returns>
        </member>
        <member name="M:Minio.V4Authenticator.SignHmac(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
            <summary>
                Compute hmac of input content with key.
            </summary>
            <param name="key">Hmac key</param>
            <param name="content">Bytes to be hmac computed</param>
            <returns>Computed hmac of input content</returns>
        </member>
        <member name="M:Minio.V4Authenticator.GetStringToSign(System.String,System.DateTime,System.String,System.Boolean)">
            <summary>
                Get string to sign.
            </summary>
            <param name="region">Requested region</param>
            <param name="signingDate">Date for signature to be signed</param>
            <param name="canonicalRequestHash">Hexadecimal encoded sha256 checksum of canonicalRequest</param>
            <param name="isSts">boolean; if true role credentials, otherwise IAM user</param>
            <returns>String to sign</returns>
        </member>
        <member name="M:Minio.V4Authenticator.GetScope(System.String,System.DateTime,System.Boolean)">
            <summary>
                Get scope.
            </summary>
            <param name="region">Requested region</param>
            <param name="signingDate">Date for signature to be signed</param>
            <param name="isSts">boolean; if true role credentials, otherwise IAM user</param>
            <returns>Scope string</returns>
        </member>
        <member name="M:Minio.V4Authenticator.ComputeSha256(System.ReadOnlySpan{System.Byte})">
            <summary>
                Compute sha256 checksum.
            </summary>
            <param name="body">Bytes body</param>
            <returns>Bytes of sha256 checksum</returns>
        </member>
        <member name="M:Minio.V4Authenticator.BytesToHex(System.ReadOnlySpan{System.Byte})">
            <summary>
                Convert bytes to hexadecimal string.
            </summary>
            <param name="checkSum">Bytes of any checksum</param>
            <returns>Hexlified string of input bytes</returns>
        </member>
        <member name="M:Minio.V4Authenticator.PresignPostSignature(System.String,System.DateTime,System.String)">
            <summary>
                Generate signature for post policy.
            </summary>
            <param name="region">Requested region</param>
            <param name="signingDate">Date for signature to be signed</param>
            <param name="policyBase64">Base64 encoded policy JSON</param>
            <returns>Computed signature</returns>
        </member>
        <member name="M:Minio.V4Authenticator.PresignURL(Minio.HttpRequestMessageBuilder,System.Int32,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
                Presigns any input client object with a requested expiry.
            </summary>
            <param name="requestBuilder">Instantiated requestBuilder</param>
            <param name="expires">Expiration in seconds</param>
            <param name="region">Region of storage</param>
            <param name="sessionToken">Value for session token</param>
            <param name="reqDate"> Optional requestBuilder date and time in UTC</param>
            <returns>Presigned url</returns>
        </member>
        <member name="M:Minio.V4Authenticator.GetPresignCanonicalRequest(System.Net.Http.HttpMethod,System.Uri,System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
                Get presign canonical requestBuilder.
            </summary>
            <param name="requestMethod">HTTP method used for this requestBuilder</param>
            <param name="uri">
                Full url for this requestBuilder, including all query parameters except for headers and
                X-Amz-Signature
            </param>
            <param name="headersToSign">The key-value of headers.</param>
            <returns>Presigned canonical requestBuilder</returns>
        </member>
        <member name="M:Minio.V4Authenticator.GetCanonicalRequest(Minio.HttpRequestMessageBuilder,System.Collections.Generic.SortedDictionary{System.String,System.String})">
            <summary>
                Get canonical requestBuilder.
            </summary>
            <param name="requestBuilder">Instantiated requestBuilder object</param>
            <param name="headersToSign">Dictionary of http headers to be signed</param>
            <returns>Canonical Request</returns>
        </member>
        <member name="M:Minio.V4Authenticator.GetHeadersToSign(Minio.HttpRequestMessageBuilder)">
            <summary>
                Get headers to be signed.
            </summary>
            <param name="requestBuilder">Instantiated requesst</param>
            <returns>Sorted dictionary of headers to be signed</returns>
        </member>
        <member name="M:Minio.V4Authenticator.SetDateHeader(Minio.HttpRequestMessageBuilder,System.DateTime)">
            <summary>
                Sets 'x-amz-date' http header.
            </summary>
            <param name="requestBuilder">Instantiated requestBuilder object</param>
            <param name="signingDate">Date for signature to be signed</param>
        </member>
        <member name="M:Minio.V4Authenticator.SetHostHeader(Minio.HttpRequestMessageBuilder,System.String)">
            <summary>
                Set 'Host' http header.
            </summary>
            <param name="requestBuilder">Instantiated requestBuilder object</param>
            <param name="hostUrl">Host url</param>
        </member>
        <member name="M:Minio.V4Authenticator.SetSessionTokenHeader(Minio.HttpRequestMessageBuilder,System.String)">
            <summary>
                Set 'X-Amz-Security-Token' http header.
            </summary>
            <param name="requestBuilder">Instantiated requestBuilder object</param>
            <param name="sessionToken">session token</param>
        </member>
        <member name="M:Minio.V4Authenticator.SetContentSha256(Minio.HttpRequestMessageBuilder,System.Boolean)">
            <summary>
                Set 'x-amz-content-sha256' http header.
            </summary>
            <param name="requestBuilder">Instantiated requestBuilder object</param>
            <param name="isSts">boolean; if true role credentials, otherwise IAM user</param>
        </member>
        <member name="M:PolyfillExtensions.WaitAsync``1(System.Threading.Tasks.Task{``0},System.Threading.CancellationToken)">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task`1"/> that will complete when the <paramref name="task"/> completes or when the specified <paramref name="cancellationToken"/> has cancellation requested.
            </summary>
            <typeparam name="TResult">The type of the task result.</typeparam>
            <param name="task">The task to wait on for completion.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for a cancellation request.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> representing the asynchronous wait.</returns>
        </member>
        <member name="T:System.Collections.Generic.PriorityQueue`2">
            <summary>
             Represents a min priority queue.
            </summary>
            <typeparam name="TElement">Specifies the type of elements in the queue.</typeparam>
            <typeparam name="TPriority">Specifies the type of priority associated with enqueued elements.</typeparam>
            <remarks>
             Implements an array-backed quaternary min-heap. Each element is enqueued with an associated priority
             that determines the dequeue order: elements with the lowest priority get dequeued first.
            </remarks>
        </member>
        <member name="F:System.Collections.Generic.PriorityQueue`2._nodes">
            <summary>
            Represents an implicit heap-ordered complete d-ary tree, stored as an array.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.PriorityQueue`2._comparer">
            <summary>
            Custom comparer used to order the heap.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.PriorityQueue`2._unorderedItems">
            <summary>
            Lazily-initialized collection used to expose the contents of the queue.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.PriorityQueue`2._size">
            <summary>
            The number of nodes in the heap.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.PriorityQueue`2._version">
            <summary>
            Version updated on mutation to help validate enumerators operate on a consistent state.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.PriorityQueue`2.Arity">
            <summary>
            Specifies the arity of the d-ary heap, which here is quaternary.
            It is assumed that this value is a power of 2.
            </summary>
        </member>
        <member name="F:System.Collections.Generic.PriorityQueue`2.Log2Arity">
            <summary>
            The binary logarithm of <see cref="F:System.Collections.Generic.PriorityQueue`2.Arity" />.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.#ctor">
            <summary>
             Initializes a new instance of the <see cref="T:System.Collections.Generic.PriorityQueue`2"/> class.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.#ctor(System.Int32)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Collections.Generic.PriorityQueue`2"/> class
             with the specified initial capacity.
            </summary>
            <param name="initialCapacity">Initial capacity to allocate in the underlying heap array.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
             The specified <paramref name="initialCapacity"/> was negative.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.#ctor(System.Collections.Generic.IComparer{`1})">
            <summary>
             Initializes a new instance of the <see cref="T:System.Collections.Generic.PriorityQueue`2"/> class
             with the specified custom priority comparer.
            </summary>
            <param name="comparer">
             Custom comparer dictating the ordering of elements.
             Uses <see cref="P:System.Collections.Generic.Comparer`1.Default" /> if the argument is <see langword="null"/>.
            </param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`1})">
            <summary>
             Initializes a new instance of the <see cref="T:System.Collections.Generic.PriorityQueue`2"/> class
             with the specified initial capacity and custom priority comparer.
            </summary>
            <param name="initialCapacity">Initial capacity to allocate in the underlying heap array.</param>
            <param name="comparer">
             Custom comparer dictating the ordering of elements.
             Uses <see cref="P:System.Collections.Generic.Comparer`1.Default" /> if the argument is <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
             The specified <paramref name="initialCapacity"/> was negative.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
             Initializes a new instance of the <see cref="T:System.Collections.Generic.PriorityQueue`2"/> class
             that is populated with the specified elements and priorities.
            </summary>
            <param name="items">The pairs of elements and priorities with which to populate the queue.</param>
            <exception cref="T:System.ArgumentNullException">
             The specified <paramref name="items"/> argument was <see langword="null"/>.
            </exception>
            <remarks>
             Constructs the heap using a heapify operation,
             which is generally faster than enqueuing individual elements sequentially.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.#ctor(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}},System.Collections.Generic.IComparer{`1})">
            <summary>
             Initializes a new instance of the <see cref="T:System.Collections.Generic.PriorityQueue`2"/> class
             that is populated with the specified elements and priorities,
             and with the specified custom priority comparer.
            </summary>
            <param name="items">The pairs of elements and priorities with which to populate the queue.</param>
            <param name="comparer">
             Custom comparer dictating the ordering of elements.
             Uses <see cref="P:System.Collections.Generic.Comparer`1.Default" /> if the argument is <see langword="null"/>.
            </param>
            <exception cref="T:System.ArgumentNullException">
             The specified <paramref name="items"/> argument was <see langword="null"/>.
            </exception>
            <remarks>
             Constructs the heap using a heapify operation,
             which is generally faster than enqueuing individual elements sequentially.
            </remarks>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueue`2.Count">
            <summary>
             Gets the number of elements contained in the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueue`2.Comparer">
            <summary>
             Gets the priority comparer used by the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.
            </summary>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueue`2.UnorderedItems">
            <summary>
             Gets a collection that enumerates the elements of the queue in an unordered manner.
            </summary>
            <remarks>
             The enumeration does not order items by priority, since that would require N * log(N) time and N space.
             Items are instead enumerated following the internal array heap layout.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.Enqueue(`0,`1)">
            <summary>
             Adds the specified element with associated priority to the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.
            </summary>
            <param name="element">The element to add to the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.</param>
            <param name="priority">The priority with which to associate the new element.</param>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.Peek">
            <summary>
             Returns the minimal element from the <see cref="T:System.Collections.Generic.PriorityQueue`2"/> without removing it.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Collections.Generic.PriorityQueue`2"/> is empty.</exception>
            <returns>The minimal element of the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.Dequeue">
            <summary>
             Removes and returns the minimal element from the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The queue is empty.</exception>
            <returns>The minimal element of the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.DequeueEnqueue(`0,`1)">
            <summary>
             Removes the minimal element and then immediately adds the specified element with associated priority to the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>,
            </summary>
            <param name="element">The element to add to the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.</param>
            <param name="priority">The priority with which to associate the new element.</param>
            <exception cref="T:System.InvalidOperationException">The queue is empty.</exception>
            <returns>The minimal element removed before performing the enqueue operation.</returns>
            <remarks>
             Implements an extract-then-insert heap operation that is generally more efficient
             than sequencing Dequeue and Enqueue operations: in the worst case scenario only one
             shift-down operation is required.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.TryDequeue(`0@,`1@)">
            <summary>
             Removes the minimal element from the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>,
             and copies it to the <paramref name="element"/> parameter,
             and its associated priority to the <paramref name="priority"/> parameter.
            </summary>
            <param name="element">The removed element.</param>
            <param name="priority">The priority associated with the removed element.</param>
            <returns>
             <see langword="true"/> if the element is successfully removed;
             <see langword="false"/> if the <see cref="T:System.Collections.Generic.PriorityQueue`2"/> is empty.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.TryPeek(`0@,`1@)">
            <summary>
             Returns a value that indicates whether there is a minimal element in the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>,
             and if one is present, copies it to the <paramref name="element"/> parameter,
             and its associated priority to the <paramref name="priority"/> parameter.
             The element is not removed from the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.
            </summary>
            <param name="element">The minimal element in the queue.</param>
            <param name="priority">The priority associated with the minimal element.</param>
            <returns>
             <see langword="true"/> if there is a minimal element;
             <see langword="false"/> if the <see cref="T:System.Collections.Generic.PriorityQueue`2"/> is empty.
            </returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.EnqueueDequeue(`0,`1)">
            <summary>
             Adds the specified element with associated priority to the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>,
             and immediately removes the minimal element, returning the result.
            </summary>
            <param name="element">The element to add to the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.</param>
            <param name="priority">The priority with which to associate the new element.</param>
            <returns>The minimal element removed after the enqueue operation.</returns>
            <remarks>
             Implements an insert-then-extract heap operation that is generally more efficient
             than sequencing Enqueue and Dequeue operations: in the worst case scenario only one
             shift-down operation is required.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.EnqueueRange(System.Collections.Generic.IEnumerable{System.ValueTuple{`0,`1}})">
            <summary>
             Enqueues a sequence of element/priority pairs to the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.
            </summary>
            <param name="items">The pairs of elements and priorities to add to the queue.</param>
            <exception cref="T:System.ArgumentNullException">
             The specified <paramref name="items"/> argument was <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.EnqueueRange(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
             Enqueues a sequence of elements pairs to the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>,
             all associated with the specified priority.
            </summary>
            <param name="elements">The elements to add to the queue.</param>
            <param name="priority">The priority to associate with the new elements.</param>
            <exception cref="T:System.ArgumentNullException">
             The specified <paramref name="elements"/> argument was <see langword="null"/>.
            </exception>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.Clear">
            <summary>
             Removes all items from the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.EnsureCapacity(System.Int32)">
            <summary>
             Ensures that the <see cref="T:System.Collections.Generic.PriorityQueue`2"/> can hold up to
             <paramref name="capacity"/> items without further expansion of its backing storage.
            </summary>
            <param name="capacity">The minimum capacity to be used.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
             The specified <paramref name="capacity"/> is negative.
            </exception>
            <returns>The current capacity of the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>.</returns>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.TrimExcess">
            <summary>
             Sets the capacity to the actual number of items in the <see cref="T:System.Collections.Generic.PriorityQueue`2"/>,
             if that is less than 90 percent of current capacity.
            </summary>
            <remarks>
             This method can be used to minimize a collection's memory overhead
             if no new elements will be added to the collection.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.Grow(System.Int32)">
            <summary>
            Grows the priority queue to match the specified min capacity.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.RemoveRootNode">
            <summary>
            Removes the node from the root of the heap
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.GetParentIndex(System.Int32)">
            <summary>
            Gets the index of an element's parent.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.GetFirstChildIndex(System.Int32)">
            <summary>
            Gets the index of the first child of an element.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.Heapify">
            <summary>
            Converts an unordered list into a heap.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.MoveUpDefaultComparer(System.ValueTuple{`0,`1},System.Int32)">
            <summary>
            Moves a node up in the tree to restore heap order.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.MoveUpCustomComparer(System.ValueTuple{`0,`1},System.Int32)">
            <summary>
            Moves a node up in the tree to restore heap order.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.MoveDownDefaultComparer(System.ValueTuple{`0,`1},System.Int32)">
            <summary>
            Moves a node down in the tree to restore heap order.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.MoveDownCustomComparer(System.ValueTuple{`0,`1},System.Int32)">
            <summary>
            Moves a node down in the tree to restore heap order.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.InitializeComparer(System.Collections.Generic.IComparer{`1})">
            <summary>
            Initializes the custom comparer to be used internally by the heap.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection">
            <summary>
             Enumerates the contents of a <see cref="T:System.Collections.Generic.PriorityQueue`2"/>, without any ordering guarantees.
            </summary>
        </member>
        <member name="T:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.Enumerator">
            <summary>
             Enumerates the element and priority pairs of a <see cref="T:System.Collections.Generic.PriorityQueue`2"/>,
             without any ordering guarantees.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.Enumerator.Dispose">
            <summary>
            Releases all resources used by the <see cref="T:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.Enumerator"/>.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.Enumerator.MoveNext">
            <summary>
            Advances the enumerator to the next element of the <see cref="P:System.Collections.Generic.PriorityQueue`2.UnorderedItems"/>.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="P:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.Enumerator.Current">
            <summary>
            Gets the element at the current position of the enumerator.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="P:System.Collections.Generic.PriorityQueue`2.UnorderedItems"/>.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.PriorityQueue`2.UnorderedItemsCollection.Enumerator"/> for the <see cref="P:System.Collections.Generic.PriorityQueue`2.UnorderedItems"/>.</returns>
        </member>
        <member name="T:System.Collections.Generic.ReferenceEqualityComparer">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> that uses reference equality (<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>)
            instead of value equality (<see cref="M:System.Object.Equals(System.Object)"/>) when comparing two object instances.
            </summary>
            <remarks>
            The <see cref="T:System.Collections.Generic.ReferenceEqualityComparer"/> type cannot be instantiated. Instead, use the <see cref="P:System.Collections.Generic.ReferenceEqualityComparer.Instance"/> property
            to access the singleton instance of this type.
            </remarks>
        </member>
        <member name="P:System.Collections.Generic.ReferenceEqualityComparer.Instance">
            <summary>
            Gets the singleton <see cref="T:System.Collections.Generic.ReferenceEqualityComparer"/> instance.
            </summary>
        </member>
        <member name="M:System.Collections.Generic.ReferenceEqualityComparer.Equals(System.Object,System.Object)">
            <summary>
            Determines whether two object references refer to the same object instance.
            </summary>
            <param name="x">The first object to compare.</param>
            <param name="y">The second object to compare.</param>
            <returns>
            <see langword="true"/> if both <paramref name="x"/> and <paramref name="y"/> refer to the same object instance
            or if both are <see langword="null"/>; otherwise, <see langword="false"/>.
            </returns>
            <remarks>
            This API is a wrapper around <see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)"/>.
            It is not necessarily equivalent to calling <see cref="M:System.Object.Equals(System.Object,System.Object)"/>.
            </remarks>
        </member>
        <member name="M:System.Collections.Generic.ReferenceEqualityComparer.GetHashCode(System.Object)">
            <summary>
            Returns a hash code for the specified object. The returned hash code is based on the object
            identity, not on the contents of the object.
            </summary>
            <param name="obj">The object for which to retrieve the hash code.</param>
            <returns>A hash code for the identity of <paramref name="obj"/>.</returns>
            <remarks>
            This API is a wrapper around <see cref="M:System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(System.Object)"/>.
            It is not necessarily equivalent to calling <see cref="M:System.Object.GetHashCode"/>.
            </remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
              Specifies that <see langword="null"/> is allowed as an input even if the
              corresponding type disallows it.
            </summary>
            <summary>Specifies that null is allowed as an input even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>Specifies that null is disallowed as an input even if the corresponding type allows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>Applied to a method that will never return under any circumstance.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>Specifies that the method will not return if the associated Boolean parameter is passed the specified value.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified parameter value.</summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable by diagnostics if the argument to
            the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>Gets the condition parameter value.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute">
            <summary>
            States a dependency that one member has on another.
            </summary>
            <remarks>
            This can be used to inform tooling of a dependency that is otherwise not evident purely from
            metadata and IL, for example a member relied on via reflection.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on the same type as the consumer.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing <paramref name="memberSignature"/>.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified signature of a member on a type in an assembly.
            </summary>
            <param name="memberSignature">The signature of the member depended on.</param>
            <param name="typeName">The full name of the type containing the specified member.</param>
            <param name="assemblyName">The assembly name of the type containing the specified member.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a <see cref="T:System.Type"/>.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="type">The <see cref="T:System.Type"/> containing the specified members.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute"/> class
            with the specified types of members on a type in an assembly.
            </summary>
            <param name="memberTypes">The types of members depended on.</param>
            <param name="typeName">The full name of the type containing the specified members.</param>
            <param name="assemblyName">The assembly name of the type containing the specified members.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature">
            <summary>
            Gets the signature of the member depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members depended on.
            </summary>
            <remarks>
            Either <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberSignature"/> must be a valid string or <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.MemberTypes"/>
            must not equal <see cref="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None"/>, but not both.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type">
            <summary>
            Gets the <see cref="T:System.Type"/> containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName">
            <summary>
            Gets the full name of the type containing the specified member.
            </summary>
            <remarks>
            If neither <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Type"/> nor <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> are specified,
            the type of the consumer is assumed.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName">
            <summary>
            Gets the assembly name of the specified type.
            </summary>
            <remarks>
            <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.AssemblyName"/> is only valid when <see cref="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.TypeName"/> is specified.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicDependencyAttribute.Condition">
            <summary>
            Gets or sets the condition in which the dependency is applicable, e.g. "DEBUG".
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute">
            <summary>
             Indicates that an API is experimental and it may change in the future.
            </summary>
            <remarks>
              This attribute allows call sites to be flagged with a diagnostic that indicates that an experimental
              feature is used. Authors can use this attribute to ship preview features in their assemblies.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.#ctor(System.String)">
            <summary>
             Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.ExperimentalAttribute"/> class, specifying the ID that the compiler will use
             when reporting a use of the API the attribute applies to.
            </summary>
            <param name="diagnosticId">The ID that the compiler will use when reporting a use of the API the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.DiagnosticId">
            <summary>
             Gets the ID that the compiler will use when reporting a use of the API the attribute applies to.
            </summary>
            <value>The unique diagnostic ID.</value>
            <remarks>
             The diagnostic ID is shown in build output for warnings and errors.
             <para>This property represents the unique ID that can be used to suppress the warnings or errors, if needed.</para>
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.ExperimentalAttribute.UrlFormat">
            <summary>
             Gets or sets the URL for corresponding documentation.
             The API accepts a format string instead of an actual URL, creating a generic URL that includes the diagnostic ID.
            </summary>
            <value>The format string that represents a URL to corresponding documentation.</value>
            <remarks>An example format string is <c>https://contoso.com/obsoletion-warnings/{0}</c>.</remarks>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>Specifies that an output may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter may be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with a field or property member.</summary>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>Initializes the attribute with the list of field and property members.</summary>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>Specifies that the method or property will ensure that the listed field and property members have not-null values when returning with the specified return value condition.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>Initializes the attribute with the specified return value condition and a field or property member.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="member">
            The field or property member that is promised to be not-null.
            </param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>Initializes the attribute with the specified return value condition and list of field and property members.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
            <param name="members">
            The list of field and property members that are promised to be not-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>Gets field or property member names.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>Specifies that an output will not be null even if the corresponding type allows it. Specifies that an input argument was not null when the call returns.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>Specifies that the output will be non-null if the named parameter is non-null.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>Initializes the attribute with the associated parameter name.</summary>
            <param name="parameterName">
            The associated parameter name.  The output will be non-null if the argument to the parameter specified is non-null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>Gets the associated parameter name.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>Initializes the attribute with the specified return value condition.</summary>
            <param name="returnValue">
            The return value condition. If the method returns this value, the associated parameter will not be null.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute">
            <summary>
            Indicates that the specified member requires assembly files to be on disk.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="!:global::System.RequiresAssemblyFilesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:global::System.RequiresAssemblyFilesAttribute"/> class.
            </summary>
            <param name="message">
            A message that contains information about the need for assembly files to be on disk.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Message">
            <summary>
            Gets an optional message that contains information about the need for
            assembly files to be on disk.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresAssemblyFilesAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the member,
            why it requires assembly files to be on disk, and what options a consumer has
            to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute">
            <summary>
            Indicates that the specified method requires the ability to generate new code at runtime,
            for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when compiling ahead of time.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of dynamic code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of dynamic code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresDynamicCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires dynamic code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute">
            <summary>
            Indicates that the specified method requires dynamic access to code that is not referenced
            statically, for example through <see cref="N:System.Reflection"/>.
            </summary>
            <remarks>
            This allows tools to understand which methods are unsafe to call when removing unreferenced
            code from an application.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute"/> class
            with the specified message.
            </summary>
            <param name="message">
            A message that contains information about the usage of unreferenced code.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Message">
            <summary>
            Gets a message that contains information about the usage of unreferenced code.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.RequiresUnreferencedCodeAttribute.Url">
            <summary>
            Gets or sets an optional URL that contains more information about the method,
            why it requires unreferenced code, and what options a consumer has to deal with it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type, and callers
            do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>Specifies the syntax used in a string.</summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute">
            <summary>
            Suppresses reporting of a specific rule violation, allowing multiple suppressions on a
            single code artifact.
            </summary>
            <remarks>
            <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> is different than
            <see cref="T:System.Diagnostics.CodeAnalysis.SuppressMessageAttribute"/> in that it doesn't have a
            <see cref="T:System.Diagnostics.ConditionalAttribute"/>. So it is always preserved in the compiled assembly.
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/>
            class, specifying the category of the tool and the identifier for an analysis rule.
            </summary>
            <param name="category">The category for the attribute.</param>
            <param name="checkId">The identifier of the analysis rule the attribute applies to.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category">
            <summary>
            Gets the category identifying the classification of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> property describes the tool or tool analysis category
            for which a message suppression attribute applies.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId">
            <summary>
            Gets the identifier of the analysis tool rule to be suppressed.
            </summary>
            <remarks>
            Concatenated together, the <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Category"/> and <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.CheckId"/>
            properties form a unique check identifier.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Scope">
            <summary>
            Gets or sets the scope of the code that is relevant for the attribute.
            </summary>
            <remarks>
            The Scope property is an optional argument that specifies the metadata scope for which
            the attribute is relevant.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target">
            <summary>
            Gets or sets a fully qualified path that represents the target of the attribute.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Target"/> property is an optional argument identifying the analysis target
            of the attribute. An example value is "System.IO.Stream.ctor():System.Void".
            Because it is fully qualified, it can be long, particularly for targets such as parameters.
            The analysis tool user interface should be capable of automatically formatting the parameter.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId">
            <summary>
            Gets or sets an optional argument expanding on exclusion criteria.
            </summary>
            <remarks>
            The <see cref="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.MessageId"/> property is an optional argument that specifies additional
            exclusion where the literal metadata target is not sufficiently precise. For example,
            the <see cref="T:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute"/> cannot be applied within a method,
            and it may be desirable to suppress a violation against a statement in the method that will
            give a rule violation, but not against all statements in the method.
            </remarks>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.UnconditionalSuppressMessageAttribute.Justification">
            <summary>
            Gets or sets the justification for suppressing the code analysis message.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.StackTraceHiddenAttribute">
            <summary>
            Types and Methods attributed with StackTraceHidden will be omitted from the stack trace text shown in StackTrace.ToString()
            and Exception.StackTrace
            </summary>
        </member>
        <member name="M:System.Diagnostics.StackTraceHiddenAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.StackTraceHiddenAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CollectionBuilderAttribute.#ctor(System.Type,System.String)">
            <summary>Initialize the attribute to refer to the <paramref name="methodName"/> method on the <paramref name="builderType"/> type.</summary>
            <param name="builderType">The type of the builder to use to construct the collection.</param>
            <param name="methodName">The name of the method on the builder to use to construct the collection.</param>
            <remarks>
            <paramref name="methodName"/> must refer to a static method that accepts a single parameter of
            type <see cref="T:System.ReadOnlySpan`1"/> and returns an instance of the collection being built containing
            a copy of the data from that span.  In future releases of .NET, additional patterns may be supported.
            </remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.BuilderType">
            <summary>Gets the type of the builder to use to construct the collection.</summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CollectionBuilderAttribute.MethodName">
            <summary>Gets the name of the method on the builder to use to construct the collection.</summary>
            <remarks>This should match the metadata name of the target method. For example, this might be ".ctor" if targeting the type's constructor.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.DisableRuntimeMarshallingAttribute">
             <summary>
             Disables the built-in runtime managed/unmanaged marshalling subsystem for
             P/Invokes, Delegate types, and unmanaged function pointer invocations.
             </summary>
             <remarks>
             The built-in marshalling subsystem has some behaviors that cannot be changed due to
             backward-compatibility requirements. This attribute allows disabling the built-in
             subsystem and instead uses the following rules for P/Invokes, Delegates,
             and unmanaged function pointer invocations:
            
             - All value types that do not contain reference type fields recursively (<c>unmanaged</c> in C#) are blittable
             - Value types that recursively have any fields that have <c>[StructLayout(LayoutKind.Auto)]</c> are disallowed from interop.
             - All reference types are disallowed from usage in interop scenarios.
             - SetLastError support in P/Invokes is disabled.
             - varargs support is disabled.
             - LCIDConversionAttribute support is disabled.
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="T:System.Runtime.InteropServices.SuppressGCTransitionAttribute">
             <summary>
             An attribute used to indicate a GC transition should be skipped when making an unmanaged function call.
             </summary>
             <example>
             Example of a valid use case. The Win32 `GetTickCount()` function is a small performance related function
             that reads some global memory and returns the value. In this case, the GC transition overhead is significantly
             more than the memory read.
             <code>
             using System;
             using System.Runtime.InteropServices;
             class Program
             {
                 [DllImport("Kernel32")]
                 [SuppressGCTransition]
                 static extern int GetTickCount();
                 static void Main()
                 {
                     Console.WriteLine($"{GetTickCount()}");
                 }
             }
             </code>
             </example>
             <remarks>
             This attribute is ignored if applied to a method without the <see cref="T:System.Runtime.InteropServices.DllImportAttribute"/>.
            
             Forgoing this transition can yield benefits when the cost of the transition is more than the execution time
             of the unmanaged function. However, avoiding this transition removes some of the guarantees the runtime
             provides through a normal P/Invoke. When exiting the managed runtime to enter an unmanaged function the
             GC must transition from Cooperative mode into Preemptive mode. Full details on these modes can be found at
             https://github.com/dotnet/runtime/blob/main/docs/coding-guidelines/clr-code-guide.md#2.1.8.
             Suppressing the GC transition is an advanced scenario and should not be done without fully understanding
             potential consequences.
            
             One of these consequences is an impact to Mixed-mode debugging (https://docs.microsoft.com/visualstudio/debugger/how-to-debug-in-mixed-mode).
             During Mixed-mode debugging, it is not possible to step into or set breakpoints in a P/Invoke that
             has been marked with this attribute. A workaround is to switch to native debugging and set a breakpoint in the native function.
             In general, usage of this attribute is not recommended if debugging the P/Invoke is important, for example
             stepping through the native code or diagnosing an exception thrown from the native code.
            
             The runtime may load the native library for method marked with this attribute in advance before the method is called for the first time.
             Usage of this attribute is not recommended for platform neutral libraries with conditional platform specific code.
            
             The P/Invoke method that this attribute is applied to must have all of the following properties:
               * Native function always executes for a trivial amount of time (less than 1 microsecond).
               * Native function does not perform a blocking syscall (e.g. any type of I/O).
               * Native function does not call back into the runtime (e.g. Reverse P/Invoke).
               * Native function does not throw exceptions.
               * Native function does not manipulate locks or other concurrency primitives.
            
             Consequences of invalid uses of this attribute:
               * GC starvation.
               * Immediate runtime termination.
               * Data corruption.
             </remarks>
        </member>
        <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
            <summary>
            Any method marked with <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> can be directly called from
            native code. The function token can be loaded to a local variable using the <see href="https://docs.microsoft.com/dotnet/csharp/language-reference/operators/pointer-related-operators#address-of-operator-">address-of</see> operator
            in C# and passed as a callback to a native method.
            </summary>
            <remarks>
            Methods marked with this attribute have the following restrictions:
              * Method must be marked "static".
              * Must not be called from managed code.
              * Must only have <see href="https://docs.microsoft.com/dotnet/framework/interop/blittable-and-non-blittable-types">blittable</see> arguments.
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
            <summary>
            Optional. If omitted, the runtime will use the default platform calling convention.
            </summary>
            <remarks>
            Supplied types must be from the official "System.Runtime.CompilerServices" namespace and
            be of the form "CallConvXXX".
            </remarks>
        </member>
        <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
            <summary>
            Optional. If omitted, no named export is emitted during compilation.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.ObsoletedOSPlatformAttribute">
            <summary>
            Marks APIs that were obsoleted in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that should not be used anymore.
            </remarks>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformAttribute">
             <summary>
             Records the operating system (and minimum version) that supports an API. Multiple attributes can be
             applied to indicate support on multiple operating systems.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformAttribute" />
             or use guards to prevent calls to APIs on unsupported operating systems.
            
             A given platform should only be specified once.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute">
             <summary>
             Annotates a custom guard field, property or method with a supported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple supported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.SupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that field, property or method in a conditional or assert statements in order to safely call platform specific APIs.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.TargetPlatformAttribute">
            <summary>
            Records the platform that the project targeted.
            </summary>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformAttribute">
            <summary>
            Marks APIs that were removed in a given operating system version.
            </summary>
            <remarks>
            Primarily used by OS bindings to indicate APIs that are only available in
            earlier versions.
            </remarks>
        </member>
        <member name="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute">
             <summary>
             Annotates the custom guard field, property or method with an unsupported platform name and optional version.
             Multiple attributes can be applied to indicate guard for multiple unsupported platforms.
             </summary>
             <remarks>
             Callers can apply a <see cref="T:System.Runtime.Versioning.UnsupportedOSPlatformGuardAttribute" /> to a field, property or method
             and use that  field, property or method in a conditional or assert statements as a guard to safely call APIs unsupported on those platforms.
            
             The type of the field or property should be boolean, the method return type should be boolean in order to be used as platform guard.
             </remarks>
        </member>
        <member name="T:System.Threading.Tasks.TaskToAsyncResult">
            <summary>
            Provides methods for using <see cref="T:System.Threading.Tasks.Task"/> to implement the Asynchronous Programming Model
            pattern based on "Begin" and "End" methods.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)">
            <summary>Creates a new <see cref="T:System.IAsyncResult"/> from the specified <see cref="T:System.Threading.Tasks.Task"/>, optionally invoking <paramref name="callback"/> when the task has completed.</summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task"/> to be wrapped in an <see cref="T:System.IAsyncResult"/>.</param>
            <param name="callback">The callback to be invoked upon <paramref name="task"/>'s completion. If <see langword="null"/>, no callback will be invoked.</param>
            <param name="state">The state to be stored in the <see cref="T:System.IAsyncResult"/>.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> to represent the task's asynchronous operation. This instance will also be passed to <paramref name="callback"/> when it's invoked.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="task"/> is null.</exception>
            <remarks>
            In conjunction with the <see cref="M:System.Threading.Tasks.TaskToAsyncResult.End(System.IAsyncResult)"/> or <see cref="M:System.Threading.Tasks.TaskToAsyncResult.End``1(System.IAsyncResult)"/> methods, this method may be used
            to implement the Begin/End pattern (also known as the Asynchronous Programming Model pattern, or APM). It is recommended to not expose this pattern
            in new code; the methods on <see cref="T:System.Threading.Tasks.TaskToAsyncResult"/> are intended only to help implement such Begin/End methods when they must be exposed, for example
            because a base class provides virtual methods for the pattern, or when they've already been exposed and must remain for compatibility.  These methods enable
            implementing all of the core asynchronous logic via <see cref="T:System.Threading.Tasks.Task"/>s and then easily implementing Begin/End methods around that functionality.
            </remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncResult.End(System.IAsyncResult)">
            <summary>Waits for the <see cref="T:System.Threading.Tasks.Task"/> wrapped by the <see cref="T:System.IAsyncResult"/> returned by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/> to complete.</summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> for which to wait.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not produced by a call to <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/>.</exception>
            <remarks>This will propagate any exception stored in the wrapped <see cref="T:System.Threading.Tasks.Task"/>.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncResult.End``1(System.IAsyncResult)">
            <summary>Waits for the <see cref="T:System.Threading.Tasks.Task`1"/> wrapped by the <see cref="T:System.IAsyncResult"/> returned by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/> to complete.</summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> for which to wait.</param>
            <returns>The result of the <see cref="T:System.Threading.Tasks.Task`1"/> wrapped by the <see cref="T:System.IAsyncResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not produced by a call to <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/>.</exception>
            <remarks>This will propagate any exception stored in the wrapped <see cref="T:System.Threading.Tasks.Task`1"/>.</remarks>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncResult.Unwrap(System.IAsyncResult)">
            <summary>Extracts the underlying <see cref="T:System.Threading.Tasks.Task"/> from an <see cref="T:System.IAsyncResult"/> created by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/>.</summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> created by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/>.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> wrapped by the <see cref="T:System.IAsyncResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not produced by a call to <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/>.</exception>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncResult.Unwrap``1(System.IAsyncResult)">
            <summary>Extracts the underlying <see cref="T:System.Threading.Tasks.Task`1"/> from an <see cref="T:System.IAsyncResult"/> created by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/>.</summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> created by <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/>.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task`1"/> wrapped by the <see cref="T:System.IAsyncResult"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="asyncResult"/> was not produced by a call to <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/>,
            or the <see cref="T:System.Threading.Tasks.Task`1"/> provided to <see cref="M:System.Threading.Tasks.TaskToAsyncResult.Begin(System.Threading.Tasks.Task,System.AsyncCallback,System.Object)"/> was used a generic type parameter
            that's different from the <typeparamref name="TResult"/> supplied to this call.
            </exception>
        </member>
        <member name="T:System.Threading.Tasks.TaskToAsyncResult.TaskAsyncResult">
            <summary>Provides a simple <see cref="T:System.IAsyncResult"/> that wraps a <see cref="T:System.Threading.Tasks.Task"/>.</summary>
            <remarks>
            We could use the Task as the IAsyncResult if the Task's AsyncState is the same as the object state,
            but that's very rare, in particular in a situation where someone cares about allocation, and always
            using TaskAsyncResult simplifies things and enables additional optimizations.
            </remarks>
        </member>
        <member name="F:System.Threading.Tasks.TaskToAsyncResult.TaskAsyncResult._task">
            <summary>The wrapped Task.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToAsyncResult.TaskAsyncResult._callback">
            <summary>Callback to invoke when the wrapped task completes.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncResult.TaskAsyncResult.#ctor(System.Threading.Tasks.Task,System.Object,System.AsyncCallback)">
            <summary>Initializes the IAsyncResult with the Task to wrap and the associated object state.</summary>
            <param name="task">The Task to wrap.</param>
            <param name="state">The new AsyncState value.</param>
            <param name="callback">Callback to invoke when the wrapped task completes.</param>
        </member>
        <member name="P:System.Threading.Tasks.TaskToAsyncResult.TaskAsyncResult.AsyncState">
            <inheritdoc/>
        </member>
        <member name="P:System.Threading.Tasks.TaskToAsyncResult.TaskAsyncResult.CompletedSynchronously">
            <inheritdoc/>
        </member>
        <member name="P:System.Threading.Tasks.TaskToAsyncResult.TaskAsyncResult.IsCompleted">
            <inheritdoc/>
        </member>
        <member name="P:System.Threading.Tasks.TaskToAsyncResult.TaskAsyncResult.AsyncWaitHandle">
            <inheritdoc/>
        </member>
    </members>
</doc>
